{"version":3,"file":"battle-dex.js","names":["window","global","exports","nodewebkit","process","versions","toID","text","_text","_text2","id","userid","toLowerCase","replace","toUserid","PSUtils","_class","_proto","prototype","splitFirst","str","delimiter","limit","arguments","length","undefined","splitStr","delimiterIndex","indexOf","push","slice","compare","a","b","localeCompare","Array","isArray","i","comparison","reverse","Error","sortBy","array","callback","sort","toRoomid","roomid","toName","name","trim","substr","Dex","_class3","_this","gen","learnsetGenchar","currentGen","modid","cache","statNames","statNamesExceptHP","pokeballs","resourcePrefix","_window$document","_window$document$loca","prefix","document","location","protocol","Config","routes","client","fxPrefix","_window$document2","_window$document2$loc","loadedSpriteData","xy","bw","moddedDexes","moves","get","nameOrMove","BattleAliases","BattleMovedex","data","exists","_ref","exec","hpWithType","hpPower","Object","assign","basePower","Number","move","Move","items","nameOrItem","BattleItems","item","Item","abilities","nameOrAbility","BattleAbilities","ability","Ability","species","nameOrSpecies","formid","BattlePokedexAltForms","BattlePokedex","BattleBaseSpeciesChart","_i2","_BattleBaseSpeciesCha2","baseSpeciesId","startsWith","tier","baseSpecies","Species","cosmeticFormes","_i4","_species$cosmeticForm2","forme","baseForme","otherFormes","getFromPokemon","pokemon","speciesForme","types","allCache","type","toUpperCase","BattleTypeChart","damageTaken","effectType","all","isName","hasOwnProperty","_proto2","parseFormatid","formatid","modids","genStrings","match","includes","endsWith","modpid","join","concat","mod","BattleTeambuilderTable","ModdedDex","forGen","resolveAvatar","avatar","_window$Config","_window$Config$server","BattleAvatarNumbers","charAt","server","registered","port","host","encodeURIComponent","sanitizeName","prefs","prop","_window$Storage","Storage","getShortName","shortName","getEffect","PureEffect","getGen3Category","hasAbility","loadSpriteData","path","$","attr","qs","split","el","createElement","src","getElementsByTagName","appendChild","getSpriteData","isFront","options","mechanicsGen","isDynamax","dynamax","Pokemon","getIFSpriteData","volatiles","transform","shiny","gender","isGigantamax","getSpeciesForme","spriteData","w","h","y","url","pixelated","isFrontSprite","cryurl","spriteid","dir","facing","graphicsGen","Math","max","min","baseDir","animationData","miscData","speciesid","isTotem","BattlePokemonSprites","BattlePokemonSpritesBW","num","baseSpeciesid","formeid","isMega","afd","noScale","allowAnim","headname","details","find","value","headSpecies","bodySpecies","headNum","bodyNum","specialFusions","_specialFusions$headS","request","XMLHttpRequest","found","onreadystatechange","readyState","status","open","send","e","getPokemonIconNum","isFemale","facingLeft","_window$BattlePokemon","_window$BattlePokemon2","_window$BattlePokedex","_window$BattlePokedex2","_window$BattlePokemon3","BattlePokemonIconIndexes","BattlePokemonIconIndexesLeft","getPokemonIcon","_pokemon","_pokemon2","_pokemon3","_pokemon3$volatiles","_pokemon4","_pokemon5","formechange","top","floor","left","fainted","getTeambuilderSpriteData","modSpecies","modSpriteData","spriteDir","x","xydexExists","isNonstandard","getIFTeambuilderSpriteData","getTeambuilderSprite","isIF","getItemIcon","_item","spritenum","getTypeIcon","sanitizedType","getCategoryIcon","category","categoryID","sanitizedCategory","getPokeballs","_i6","_ref3","values","isPokeball","getTierSetTable","getLearnsetTable","getMovedex","getTierSet","table","tierSet","tiers","map","r","formatSlices","AG","getItemSet","itemSet","firstLearnsetid","learnsets","baseLearnsetid","battleOnly","nextLearnsetid","learnsetid","lsetSpecies","next","changesFrom","prevo","canLearn","moveid","learnset","getLearnsetMoves","moveDex","sketch","noSketch","isMax","isZ","getTypeSet","results","_this2","Moves","Items","Abilities","Types","overrideMoveData","_i8","_this2$modid2","_ModModifier$mid","mid","ModModifier","movesMod","overrideItemDesc","shortDesc","_i10","_this2$modid4","_ModModifier$mid2","itemsMod","overrideAbilityData","_i12","_this2$modid6","_ModModifier$mid3","abilitiesMod","overrideSpeciesData","_i14","_this2$modid8","_ModModifier$mid4","speciesMod","extra","_i16","_this2$modid10","_ModModifier$mid5","ModifySpecies","removeType","overrideTypeChart","_i18","_this2$modid12","_ModModifier$mid6","typesMod","parseInt","_proto3","_i20","_ref5","BTTable","DigimonTable","DigiMovedex","slices","Uber","DUber","modified","_i22","_this$modid2","_ModModifier$mid7","ModifyTierSet","OU","UU","DOU","DUU","petmods","_i24","_this$modid4","_mid","isNatDex","genCharTable","genChar","_i26","_this$modid6","_ModModifier$mid8","ModifyLearnset","chart","DigiTypeChart","anythinggoes","dex","doubles","overrideTier","littlecup","findIndex","_ref6","nfe","_ref7","bst","newStats","baseStats","stat","filter","_ref8","_ref9","categoryswap","categoryMap","hackmons","isLGPE","metronome","String","scalemons","cupName","goalBST","bstWithoutHp","scale","stabmons","speciesTypes","moveTypes","genDex","apply","prevoSpecies","excludedForme","s","_i28","_baseSpecies$otherFor2","formeName","valid","_i30","thecardgame","from","Set","createmons","evs","hpType","teraType","crtmInfo","hp","atk","def","spa","spd","spe","evsArray","shift","crossevolution","nameString","speciesString","crossSpecies","crossPrevoSpecies","mixedSpecies","newTypes","infinitefusion","nonstandard","specialSelfFusions","deoxys","rotom","shaymin","keldeo","meloetta","greninja","floette","zygarde","hoopa","lycanroc","wishiwashi","necrozma","eternatus","palafin","ogerpon","_i32","_headSpecies$otherFor2","pair","fusionSpecies","weightkg","H","S","headStat","bodyStat","_ref10","sp","natdex","gen7letsgo","gen8bdsp","gen9morebalancedhackmons","digimon","DigiItems","DigiAbilities","Digidex","typeData","preEvo","preEvoSpecies","require"],"sources":["../src/battle-dex.ts"],"sourcesContent":["/**\n * Pokemon Showdown Dex\n *\n * Roughly equivalent to sim/dex.js in a Pokemon Showdown server, but\n * designed for use in browsers rather than in Node.\n *\n * This is a generic utility library for Pokemon Showdown code: any\n * code shared between the replay viewer and the client usually ends up\n * here.\n *\n * Licensing note: PS's client has complicated licensing:\n * - The client as a whole is AGPLv3\n * - The battle replay/animation engine (battle-*.ts) by itself is MIT\n *\n * Compiled into battledata.js which includes all dependencies\n *\n * @author Guangcong Luo <guangcongluo@gmail.com>\n * @license MIT\n */\n\ndeclare var require: any;\ndeclare var global: any;\n\nif (typeof window === 'undefined') {\n\t// Node\n\t(global as any).window = global;\n} else {\n\t// browser (possibly NW.js!)\n\twindow.exports = window;\n}\n\n// @ts-ignore\nwindow.nodewebkit = !!(typeof process !== 'undefined' && process.versions && process.versions['node-webkit']);\n\nfunction toID(text: any) {\n\tif (text?.id) {\n\t\ttext = text.id;\n\t} else if (text?.userid) {\n\t\ttext = text.userid;\n\t}\n\tif (typeof text !== 'string' && typeof text !== 'number') return '' as ID;\n\treturn ('' + text).toLowerCase().replace(/[^a-z0-9]+/g, '') as ID;\n}\n\nfunction toUserid(text: any) {\n\treturn toID(text);\n}\n\ntype Comparable = number | string | boolean | Comparable[] | {reverse: Comparable};\nconst PSUtils = new class {\n\t/**\n\t * Like string.split(delimiter), but only recognizes the first `limit`\n\t * delimiters (default 1).\n\t *\n\t * `\"1 2 3 4\".split(\" \", 2) => [\"1\", \"2\"]`\n\t *\n\t * `splitFirst(\"1 2 3 4\", \" \", 1) => [\"1\", \"2 3 4\"]`\n\t *\n\t * Returns an array of length exactly limit + 1.\n\t */\n\tsplitFirst(str: string, delimiter: string, limit: number = 1) {\n\t\tlet splitStr: string[] = [];\n\t\twhile (splitStr.length < limit) {\n\t\t\tlet delimiterIndex = str.indexOf(delimiter);\n\t\t\tif (delimiterIndex >= 0) {\n\t\t\t\tsplitStr.push(str.slice(0, delimiterIndex));\n\t\t\t\tstr = str.slice(delimiterIndex + delimiter.length);\n\t\t\t} else {\n\t\t\t\tsplitStr.push(str);\n\t\t\t\tstr = '';\n\t\t\t}\n\t\t}\n\t\tsplitStr.push(str);\n\t\treturn splitStr;\n\t}\n\n\t/**\n\t * Compares two variables; intended to be used as a smarter comparator.\n\t * The two variables must be the same type (TypeScript will not check this).\n\t *\n\t * - Numbers are sorted low-to-high, use `-val` to reverse\n\t * - Strings are sorted A to Z case-semi-insensitively, use `{reverse: val}` to reverse\n\t * - Booleans are sorted true-first (REVERSE of casting to numbers), use `!val` to reverse\n\t * - Arrays are sorted lexically in the order of their elements\n\t *\n\t * In other words: `[num, str]` will be sorted A to Z, `[num, {reverse: str}]` will be sorted Z to A.\n\t */\n\tcompare(a: Comparable, b: Comparable): number {\n\t\tif (typeof a === 'number') {\n\t\t\treturn a - (b as number);\n\t\t}\n\t\tif (typeof a === 'string') {\n\t\t\treturn a.localeCompare(b as string);\n\t\t}\n\t\tif (typeof a === 'boolean') {\n\t\t\treturn (a ? 1 : 2) - (b ? 1 : 2);\n\t\t}\n\t\tif (Array.isArray(a)) {\n\t\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\t\tconst comparison = PSUtils.compare(a[i], (b as Comparable[])[i]);\n\t\t\t\tif (comparison) return comparison;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\tif (a.reverse) {\n\t\t\treturn PSUtils.compare((b as {reverse: string}).reverse, a.reverse);\n\t\t}\n\t\tthrow new Error(`Passed value ${a} is not comparable`);\n\t}\n\t/**\n\t * Sorts an array according to the callback's output on its elements.\n\t *\n\t * The callback's output is compared according to `PSUtils.compare` (in\n\t * particular, it supports arrays so you can sort by multiple things).\n\t */\n\tsortBy<T>(array: T[], callback: (a: T) => Comparable): T[];\n\t/**\n\t * Sorts an array according to `PSUtils.compare`. (Correctly sorts numbers,\n\t * unlike `array.sort`)\n\t */\n\tsortBy<T extends Comparable>(array: T[]): T[];\n\tsortBy<T>(array: T[], callback?: (a: T) => Comparable) {\n\t\tif (!callback) return (array as any[]).sort(PSUtils.compare);\n\t\treturn array.sort((a, b) => PSUtils.compare(callback(a), callback(b)));\n\t}\n};\n\n/**\n * Sanitize a room ID by removing anything that isn't alphanumeric or `-`.\n * Shouldn't actually do anything except against malicious input.\n */\nfunction toRoomid(roomid: string) {\n\treturn roomid.replace(/[^a-zA-Z0-9-]+/g, '').toLowerCase();\n}\n\nfunction toName(name: any) {\n\tif (typeof name !== 'string' && typeof name !== 'number') return '';\n\tname = ('' + name).replace(/[\\|\\s\\[\\]\\,\\u202e]+/g, ' ').trim();\n\tif (name.length > 18) name = name.substr(0, 18).trim();\n\n\t// remove zalgo\n\tname = name.replace(\n\t\t/[\\u0300-\\u036f\\u0483-\\u0489\\u0610-\\u0615\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06ED\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E]{3,}/g,\n\t\t''\n\t);\n\tname = name.replace(/[\\u239b-\\u23b9]/g, '');\n\n\treturn name;\n}\n\ninterface SpriteData {\n\tw: number;\n\th: number;\n\ty?: number;\n\tgen?: number;\n\turl?: string;\n\trawHTML?: string;\n\tpixelated?: boolean;\n\tisFrontSprite?: boolean;\n\tcryurl?: string;\n\tshiny?: boolean;\n}\n\ninterface TeambuilderSpriteData {\n\tx: number;\n\ty: number;\n\tspriteDir: string;\n\tspriteid: string;\n\tshiny?: boolean;\n}\n\nconst Dex = new class implements ModdedDex {\n\treadonly gen = 9;\n\treadonly learnsetGenchar = 'a';\n\treadonly currentGen = `gen${this.gen}`;\n\treadonly modid = [this.currentGen, this.currentGen] as ID[];\n\treadonly cache = null!;\n\n\treadonly statNames: ReadonlyArray<StatName> = ['hp', 'atk', 'def', 'spa', 'spd', 'spe'];\n\treadonly statNamesExceptHP: ReadonlyArray<StatNameExceptHP> = ['atk', 'def', 'spa', 'spd', 'spe'];\n\n\tpokeballs: string[] | null = null;\n\n\tresourcePrefix = (() => {\n\t\tlet prefix = '';\n\t\tif (window.document?.location?.protocol !== 'http:') prefix = 'https:';\n\t\treturn `${prefix}//${window.Config ? Config.routes.client : 'play.pokemonshowdown.com'}/`;\n\t\t// return `${prefix}//play.pokemonshowdown.com/`;\n\t})();\n\n\tfxPrefix = (() => {\n\t\tconst protocol = (window.document?.location?.protocol !== 'http:') ? 'https:' : '';\n\t\treturn `${protocol}//${window.Config ? Config.routes.client : 'play.pokemonshowdown.com'}/fx/`;\n\t})();\n\n\tloadedSpriteData = {xy: 1, bw: 0};\n\tmoddedDexes: {[mod: string]: ModdedDex} = {};\n\n\tparseFormatid(formatid: ID): ID[] {\n\t\tlet modids = [];\n\n\t\t// this theoratically should be /gen\\d+/, but now this to avoid errors when gen9350cup\n\t\tconst genStrings = formatid.match(/gen\\d/);\n\t\tconst gen = genStrings ? genStrings[0] : this.currentGen;\n\t\t// regulars\n\t\tif (formatid.includes('anythinggoes') || formatid.endsWith('ag')) modids.push('anythinggoes' as ID);\n\t\tif (formatid.includes('doubles') ||\n\t\t\tformatid.includes('freeforall') || formatid.startsWith(gen + 'ffa') ||\n\t\t\tformatid.includes('multibattle')) modids.push('doubles' as ID);\n\t\tif (formatid.includes('littlecup') || formatid.endsWith('lc')) modids.push('littlecup' as ID);\n\t\tif (formatid.includes('nfe')) modids.push('nfe' as ID);\n\t\t// oms\n\t\tif (formatid.match(/\\d\\d\\dcup/)) modids.push(formatid.match(/\\d\\d\\dcup/)![0] as ID);\n\t\tif (formatid.includes('almostanyability') || formatid.includes('aaa')) modids.push('almostanyability' as ID);\n\t\tif (formatid.includes('categoryswap')) modids.push('categoryswap' as ID);\n\t\tif (formatid.includes('hackmons') || formatid.endsWith('bh')) modids.push('hackmons' as ID);\n\t\tif (formatid.includes('metronome')) modids.push('metronome' as ID);\n\t\tif (formatid.includes('scalemons')) modids.push('scalemons' as ID);\n\t\tif (formatid.includes('stabmons') || formatid.includes('staaabmons')) modids.push('stabmons' as ID);\n\t\tif (formatid.includes('thecardgame')) modids.push('thecardgame' as ID);\n\t\t// species oms\n\t\t// mnm, camo, ce, ...\n\t\tif (formatid.includes('createmons')) modids.push('createmons' as ID);\n\t\tif (formatid.includes('crossevolution')) modids.push('crossevolution' as ID);\n\t\tif (formatid.includes('infinitefusion')) modids.push('infinitefusion' as ID);\n\t\t// teambuilder oms\n\t\t// aka mia-like formats\n\t\tif (formatid.includes('fortemons') || formatid.includes('moveitemability')) modids.push('fortemons' as ID);\n\t\tif (formatid.includes('trademarked') || formatid.includes('moveitemability')) modids.push('trademarked' as ID);\n\t\tif (formatid.includes('multibility') || formatid.includes('moveitemability')) modids.push('multibility' as ID);\n\t\tif (formatid.includes('dualwielding') || formatid.includes('moveitemability')) modids.push('dualwielding' as ID);\n\t\tif (formatid.includes('monotype')) modids.push('monotype' as ID);\n\t\t// essentially pet mods\n\t\tif (\n\t\t\tformatid.includes('nationaldex') || formatid.includes('natdex') || formatid.startsWith(gen + 'nd') ||\n\t\t\tformatid.includes('metronome') || formatid.includes('createmons') || formatid.includes('infinitefusion') || formatid.includes('morebalancedhackmons')\n\t\t) modids.push('natdex' as ID);\n\t\tif (formatid.includes('letsgo')) modids.push('gen7letsgo' as ID);\n\t\tif (formatid.includes('bdsp')) modids.push('gen8bdsp' as ID);\n\t\tif (formatid.includes('morebalancedhackmons')) modids.push('gen9morebalancedhackmons' as ID);\n\t\tif (formatid.includes('digimon')) modids.push('digimon' as ID);\n\t\t// todo: figure out a way to arrange the ids\n\t\tconst modpid = gen + modids.join('');\n\t\treturn [modpid as ID, gen as ID, ...modids];\n\t}\n\tmod(formatid: ID): ModdedDex {\n\t\tconst modids = this.parseFormatid(formatid);\n\t\tconst modpid = modids[0];\n\t\tif (modpid === this.currentGen) return this;\n\t\tif (!window.BattleTeambuilderTable) return this;\n\t\tif (modpid in this.moddedDexes) {\n\t\t\treturn this.moddedDexes[modpid];\n\t\t}\n\t\tthis.moddedDexes[modpid] = new ModdedDex(modids);\n\t\treturn this.moddedDexes[modpid];\n\t}\n\tforGen(gen: number) {\n\t\tif (!gen) return this;\n\t\treturn this.mod(`gen${gen}` as ID);\n\t}\n\n\tresolveAvatar(avatar: string): string {\n\t\tif (window.BattleAvatarNumbers && avatar in BattleAvatarNumbers) {\n\t\t\tavatar = BattleAvatarNumbers[avatar];\n\t\t}\n\t\tif (avatar.charAt(0) === '#') {\n\t\t\treturn Dex.resourcePrefix + 'sprites/trainers-custom/' + toID(avatar.substr(1)) + '.png';\n\t\t}\n\t\tif (avatar.includes('.') && window.Config?.server?.registered) {\n\t\t\t// custom avatar served by the server\n\t\t\tlet protocol = (Config.server.port === 443) ? 'https' : 'http';\n\t\t\treturn protocol + '://' + Config.server.host + ':' + Config.server.port +\n\t\t\t\t'/avatars/' + encodeURIComponent(avatar).replace(/\\%3F/g, '?');\n\t\t}\n\t\treturn Dex.resourcePrefix + 'sprites/trainers/' + Dex.sanitizeName(avatar || 'unknown') + '.png';\n\t}\n\n\t/**\n\t * This is used to sanitize strings from data files like `moves.js` and\n\t * `teambuilder-tables.js`.\n\t *\n\t * This makes sure untrusted strings can't wreak havoc if someone forgets to\n\t * escape it before putting it in HTML.\n\t *\n\t * None of these characters belong in these files, anyway. (They can be used\n\t * in move descriptions, but those are served from `text.js`, which are\n\t * definitely always treated as unsanitized.)\n\t */\n\tsanitizeName(name: any) {\n\t\tif (!name) return '';\n\t\treturn ('' + name)\n\t\t\t.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;')\n\t\t\t.slice(0, 50);\n\t}\n\n\tprefs(prop: string) {\n\t\t// @ts-ignore\n\t\treturn window.Storage?.prefs?.(prop);\n\t}\n\n\tgetShortName(name: string) {\n\t\tlet shortName = name.replace(/[^A-Za-z0-9]+$/, '');\n\t\tif (shortName.indexOf('(') >= 0) {\n\t\t\tshortName += name.slice(shortName.length).replace(/[^\\(\\)]+/g, '').replace(/\\(\\)/g, '');\n\t\t}\n\t\treturn shortName;\n\t}\n\n\tgetEffect(name: string | null | undefined): PureEffect | Item | Ability | Move {\n\t\tname = (name || '').trim();\n\t\tif (name.substr(0, 5) === 'item:') {\n\t\t\treturn Dex.items.get(name.substr(5).trim());\n\t\t} else if (name.substr(0, 8) === 'ability:') {\n\t\t\treturn Dex.abilities.get(name.substr(8).trim());\n\t\t} else if (name.substr(0, 5) === 'move:') {\n\t\t\treturn Dex.moves.get(name.substr(5).trim());\n\t\t}\n\t\tlet id = toID(name);\n\t\treturn new PureEffect(id, name);\n\t}\n\n\tmoves = {\n\t\tget: (nameOrMove: string | Move | null | undefined): Move => {\n\t\t\tif (nameOrMove && typeof nameOrMove !== 'string') {\n\t\t\t\t// TODO: don't accept Moves here\n\t\t\t\treturn nameOrMove;\n\t\t\t}\n\t\t\tlet name = nameOrMove || '';\n\t\t\tlet id = toID(nameOrMove);\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t}\n\t\t\tif (!window.BattleMovedex) window.BattleMovedex = {};\n\t\t\tlet data = window.BattleMovedex[id];\n\t\t\tif (data && typeof data.exists === 'boolean') return data;\n\n\t\t\tif (!data && id.substr(0, 11) === 'hiddenpower' && id.length > 11) {\n\t\t\t\tlet [, hpWithType, hpPower] = /([a-z]*)([0-9]*)/.exec(id)!;\n\t\t\t\tdata = {\n\t\t\t\t\t...(window.BattleMovedex[hpWithType] || {}),\n\t\t\t\t\tbasePower: Number(hpPower) || 60,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (!data && id.substr(0, 6) === 'return' && id.length > 6) {\n\t\t\t\tdata = {\n\t\t\t\t\t...(window.BattleMovedex['return'] || {}),\n\t\t\t\t\tbasePower: Number(id.slice(6)),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (!data && id.substr(0, 11) === 'frustration' && id.length > 11) {\n\t\t\t\tdata = {\n\t\t\t\t\t...(window.BattleMovedex['frustration'] || {}),\n\t\t\t\t\tbasePower: Number(id.slice(11)),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!data) data = {exists: false};\n\t\t\tlet move = new Move(id, name, data);\n\t\t\tif (move.exists) window.BattleMovedex[id] = move;\n\t\t\treturn move;\n\t\t},\n\t};\n\n\tgetGen3Category(type: string) {\n\t\treturn [\n\t\t\t'Fire', 'Water', 'Grass', 'Electric', 'Ice', 'Psychic', 'Dark', 'Dragon',\n\t\t].includes(type) ? 'Special' : 'Physical';\n\t}\n\n\titems = {\n\t\tget: (nameOrItem: string | Item | null | undefined): Item => {\n\t\t\tif (nameOrItem && typeof nameOrItem !== 'string') {\n\t\t\t\t// TODO: don't accept Items here\n\t\t\t\treturn nameOrItem;\n\t\t\t}\n\t\t\tlet name = nameOrItem || '';\n\t\t\tlet id = toID(nameOrItem);\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t}\n\t\t\tif (!window.BattleItems) window.BattleItems = {};\n\t\t\tlet data = window.BattleItems[id];\n\t\t\tif (data && typeof data.exists === 'boolean') return data;\n\t\t\tif (!data) data = {exists: false};\n\t\t\tlet item = new Item(id, name, data);\n\t\t\tif (item.exists) window.BattleItems[id] = item;\n\t\t\treturn item;\n\t\t},\n\t};\n\n\tabilities = {\n\t\tget: (nameOrAbility: string | Ability | null | undefined): Ability => {\n\t\t\tif (nameOrAbility && typeof nameOrAbility !== 'string') {\n\t\t\t\t// TODO: don't accept Abilities here\n\t\t\t\treturn nameOrAbility;\n\t\t\t}\n\t\t\tlet name = nameOrAbility || '';\n\t\t\tlet id = toID(nameOrAbility);\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t}\n\t\t\tif (!window.BattleAbilities) window.BattleAbilities = {};\n\t\t\tlet data = window.BattleAbilities[id];\n\t\t\tif (data && typeof data.exists === 'boolean') return data;\n\t\t\tif (!data) data = {exists: false};\n\t\t\tlet ability = new Ability(id, name, data);\n\t\t\tif (ability.exists) window.BattleAbilities[id] = ability;\n\t\t\treturn ability;\n\t\t},\n\t};\n\n\tspecies = {\n\t\tget: (nameOrSpecies: string | Species | null | undefined): Species => {\n\t\t\tif (nameOrSpecies && typeof nameOrSpecies !== 'string') {\n\t\t\t\t// TODO: don't accept Species' here\n\t\t\t\treturn nameOrSpecies;\n\t\t\t}\n\t\t\tlet name = nameOrSpecies || '';\n\t\t\tlet id = toID(nameOrSpecies);\n\t\t\tlet formid = id;\n\t\t\tif (!window.BattlePokedexAltForms) window.BattlePokedexAltForms = {};\n\t\t\tif (formid in window.BattlePokedexAltForms) return window.BattlePokedexAltForms[formid];\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t} else if (window.BattlePokedex && !(id in BattlePokedex) && window.BattleBaseSpeciesChart) {\n\t\t\t\tfor (const baseSpeciesId of BattleBaseSpeciesChart) {\n\t\t\t\t\tif (formid.startsWith(baseSpeciesId)) {\n\t\t\t\t\t\tid = baseSpeciesId;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!window.BattlePokedex) window.BattlePokedex = {};\n\t\t\tlet data = window.BattlePokedex[id];\n\n\t\t\tlet species: Species;\n\t\t\tif (data && typeof data.exists === 'boolean') {\n\t\t\t\tspecies = data;\n\t\t\t} else {\n\t\t\t\tif (!data) data = {exists: false};\n\t\t\t\tif (!data.tier && id.slice(-5) === 'totem') {\n\t\t\t\t\tdata.tier = this.species.get(id.slice(0, -5)).tier;\n\t\t\t\t}\n\t\t\t\tif (!data.tier && data.baseSpecies && toID(data.baseSpecies) !== id) {\n\t\t\t\t\tdata.tier = this.species.get(data.baseSpecies).tier;\n\t\t\t\t}\n\t\t\t\tspecies = new Species(id, name, data);\n\t\t\t\tif (species.exists) window.BattlePokedex[id] = species;\n\t\t\t}\n\n\t\t\tif (species.cosmeticFormes) {\n\t\t\t\tfor (const forme of species.cosmeticFormes) {\n\t\t\t\t\tif (toID(forme) === formid) {\n\t\t\t\t\t\tspecies = new Species(formid, name, {\n\t\t\t\t\t\t\t...species,\n\t\t\t\t\t\t\tname: forme,\n\t\t\t\t\t\t\tforme: forme.slice(species.name.length + 1),\n\t\t\t\t\t\t\tbaseForme: \"\",\n\t\t\t\t\t\t\tbaseSpecies: species.name,\n\t\t\t\t\t\t\totherFormes: null,\n\t\t\t\t\t\t});\n\t\t\t\t\t\twindow.BattlePokedexAltForms[formid] = species;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn species;\n\t\t},\n\t\t// for species oms\n\t\tgetFromPokemon: (pokemon: Pokemon | ServerPokemon | PokemonSet): Species => {\n\t\t\tconst species = (pokemon as PokemonSet).species || (pokemon as (Pokemon | ServerPokemon)).speciesForme;\n\t\t\treturn this.species.get(species);\n\t\t},\n\t};\n\n\ttypes = {\n\t\tallCache: null as Type[] | null,\n\t\tget: (type: any): Type => {\n\t\t\tif (!type || typeof type === 'string') {\n\t\t\t\tconst id = toID(type) as string;\n\t\t\t\tconst name = id.substr(0, 1).toUpperCase() + id.substr(1);\n\t\t\t\ttype = (window.BattleTypeChart && window.BattleTypeChart[id]) || {};\n\t\t\t\tif (type.damageTaken) type.exists = true;\n\t\t\t\tif (!type.id) type.id = id;\n\t\t\t\tif (!type.name) type.name = name;\n\t\t\t\tif (!type.effectType) {\n\t\t\t\t\ttype.effectType = 'Type';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn type;\n\t\t},\n\t\tall: (): readonly Type[] => {\n\t\t\tif (this.types.allCache) return this.types.allCache;\n\t\t\tconst types = [];\n\t\t\tfor (const id in (window.BattleTypeChart || {})) {\n\t\t\t\ttypes.push(Dex.types.get(id));\n\t\t\t}\n\t\t\tif (types.length) this.types.allCache = types;\n\t\t\treturn types;\n\t\t},\n\t\tisName: (name: string | null): boolean => {\n\t\t\tconst id = toID(name);\n\t\t\tif (name !== id.substr(0, 1).toUpperCase() + id.substr(1)) return false;\n\t\t\treturn (window.BattleTypeChart || {}).hasOwnProperty(id);\n\t\t},\n\t};\n\n\thasAbility(species: Species, ability: string) {\n\t\tfor (const i in species.abilities) {\n\t\t\t// @ts-ignore\n\t\t\tif (ability === species.abilities[i]) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tloadSpriteData(gen: 'xy' | 'bw') {\n\t\tif (this.loadedSpriteData[gen]) return;\n\t\tthis.loadedSpriteData[gen] = 1;\n\n\t\tlet path = $('script[src*=\"pokedex-mini.js\"]').attr('src') || '';\n\t\tlet qs = '?' + (path.split('?')[1] || '');\n\t\tpath = (path.match(/.+?(?=data\\/pokedex-mini\\.js)/) || [])[0] || '';\n\n\t\tlet el = document.createElement('script');\n\t\tel.src = path + 'data/pokedex-mini-bw.js' + qs;\n\t\tdocument.getElementsByTagName('body')[0].appendChild(el);\n\t}\n\tgetSpriteData(pokemon: Pokemon | Species | string, isFront: boolean, options: {\n\t\tgen?: number,\n\t\tshiny?: boolean,\n\t\tgender?: GenderName,\n\t\tafd?: boolean,\n\t\tnoScale?: boolean,\n\t\tmod?: string,\n\t\tdynamax?: boolean,\n\t} = {gen: 6}) {\n\t\tconst mechanicsGen = options.gen || 6;\n\t\tlet isDynamax = !!options.dynamax;\n\t\tif (pokemon instanceof Pokemon) {\n\t\t\t// @ts-ignore\n\t\t\tif (options.mod === 'infinitefusion' && !Dex.prefs('noif')) return this.getIFSpriteData(pokemon, isFront, options);\n\t\t\tif (pokemon.volatiles.transform) {\n\t\t\t\toptions.shiny = pokemon.volatiles.transform[2];\n\t\t\t\toptions.gender = pokemon.volatiles.transform[3];\n\t\t\t} else {\n\t\t\t\toptions.shiny = pokemon.shiny;\n\t\t\t\toptions.gender = pokemon.gender;\n\t\t\t}\n\t\t\tlet isGigantamax = false;\n\t\t\tif (pokemon.volatiles.dynamax) {\n\t\t\t\tif (pokemon.volatiles.dynamax[1]) {\n\t\t\t\t\tisGigantamax = true;\n\t\t\t\t} else if (options.dynamax !== false) {\n\t\t\t\t\tisDynamax = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpokemon = pokemon.getSpeciesForme() + (isGigantamax ? '-Gmax' : '');\n\t\t}\n\t\tconst species = Dex.species.get(pokemon);\n\t\t// Gmax sprites are already extremely large, so we don't need to double.\n\t\tif (species.name.endsWith('-Gmax')) isDynamax = false;\n\t\tlet spriteData = {\n\t\t\tgen: mechanicsGen,\n\t\t\tw: 96,\n\t\t\th: 96,\n\t\t\ty: 0,\n\t\t\turl: Dex.resourcePrefix + 'sprites/',\n\t\t\tpixelated: true,\n\t\t\tisFrontSprite: false,\n\t\t\tcryurl: '',\n\t\t\tshiny: options.shiny,\n\t\t};\n\t\tlet name = species.spriteid;\n\t\tlet dir;\n\t\tlet facing;\n\t\tif (isFront) {\n\t\t\tspriteData.isFrontSprite = true;\n\t\t\tdir = '';\n\t\t\tfacing = 'front';\n\t\t} else {\n\t\t\tdir = '-back';\n\t\t\tfacing = 'back';\n\t\t}\n\n\t\t// Decide which gen sprites to use.\n\t\t//\n\t\t// There are several different generations we care about here:\n\t\t//\n\t\t//   - mechanicsGen: the generation number of the mechanics and battle (options.gen)\n\t\t//   - graphicsGen: the generation number of sprite/field graphics the user has requested.\n\t\t//     This will default to mechanicsGen, but may be altered depending on user preferences.\n\t\t//   - spriteData.gen: the generation number of a the specific Pokemon sprite in question.\n\t\t//     This defaults to graphicsGen, but if the graphicsGen doesn't have a sprite for the Pokemon\n\t\t//     (eg. Darmanitan in graphicsGen 2) then we go up gens until it exists.\n\t\t//\n\t\tlet graphicsGen = mechanicsGen;\n\t\tif (Dex.prefs('nopastgens')) graphicsGen = 6;\n\t\tif (Dex.prefs('bwgfx') && graphicsGen >= 6) graphicsGen = 5;\n\t\tspriteData.gen = Math.max(graphicsGen, Math.min(species.gen, 5));\n\t\tconst baseDir = ['', 'gen1', 'gen2', 'gen3', 'gen4', 'gen5', '', '', '', ''][spriteData.gen];\n\n\t\tlet animationData = null;\n\t\tlet miscData = null;\n\t\tlet speciesid = species.id;\n\t\tif (species.isTotem) speciesid = toID(name);\n\t\tif (baseDir === '' && window.BattlePokemonSprites) {\n\t\t\tanimationData = BattlePokemonSprites[speciesid];\n\t\t}\n\t\tif (baseDir === 'gen5' && window.BattlePokemonSpritesBW) {\n\t\t\tanimationData = BattlePokemonSpritesBW[speciesid];\n\t\t}\n\t\tif (window.BattlePokemonSprites) miscData = BattlePokemonSprites[speciesid];\n\t\tif (!miscData && window.BattlePokemonSpritesBW) miscData = BattlePokemonSpritesBW[speciesid];\n\t\tif (!animationData) animationData = {};\n\t\tif (!miscData) miscData = {};\n\n\t\tif (miscData.num !== 0 && miscData.num > -5000) {\n\t\t\tlet baseSpeciesid = toID(species.baseSpecies);\n\t\t\tspriteData.cryurl = 'audio/cries/' + baseSpeciesid;\n\t\t\tlet formeid = species.formeid;\n\t\t\tif (species.isMega || formeid && (\n\t\t\t\tformeid === '-crowned' ||\n\t\t\t\tformeid === '-eternal' ||\n\t\t\t\tformeid === '-eternamax' ||\n\t\t\t\tformeid === '-four' ||\n\t\t\t\tformeid === '-hangry' ||\n\t\t\t\tformeid === '-hero' ||\n\t\t\t\tformeid === '-lowkey' ||\n\t\t\t\tformeid === '-noice' ||\n\t\t\t\tformeid === '-primal' ||\n\t\t\t\tformeid === '-rapidstrike' ||\n\t\t\t\tformeid === '-roaming' ||\n\t\t\t\tformeid === '-school' ||\n\t\t\t\tformeid === '-sky' ||\n\t\t\t\tformeid === '-starter' ||\n\t\t\t\tformeid === '-super' ||\n\t\t\t\tformeid === '-therian' ||\n\t\t\t\tformeid === '-unbound' ||\n\t\t\t\tbaseSpeciesid === 'calyrex' ||\n\t\t\t\tbaseSpeciesid === 'kyurem' ||\n\t\t\t\tbaseSpeciesid === 'cramorant' ||\n\t\t\t\tbaseSpeciesid === 'indeedee' ||\n\t\t\t\tbaseSpeciesid === 'lycanroc' ||\n\t\t\t\tbaseSpeciesid === 'necrozma' ||\n\t\t\t\tbaseSpeciesid === 'oinkologne' ||\n\t\t\t\tbaseSpeciesid === 'oricorio' ||\n\t\t\t\tbaseSpeciesid === 'slowpoke' ||\n\t\t\t\tbaseSpeciesid === 'tatsugiri' ||\n\t\t\t\tbaseSpeciesid === 'zygarde'\n\t\t\t)) {\n\t\t\t\tspriteData.cryurl += formeid;\n\t\t\t}\n\t\t\tspriteData.cryurl += '.mp3';\n\t\t}\n\n\t\tif (options.shiny && mechanicsGen > 1) dir += '-shiny';\n\n\t\t// April Fool's 2014\n\t\tif (window.Config && Config.server && Config.server.afd || options.afd) {\n\t\t\tdir = 'afd' + dir;\n\t\t\tspriteData.url += dir + '/' + name + '.png';\n\t\t\t// Duplicate code but needed to make AFD tinymax work\n\t\t\t// April Fool's 2020\n\t\t\tif (isDynamax && !options.noScale) {\n\t\t\t\tspriteData.w *= 0.25;\n\t\t\t\tspriteData.h *= 0.25;\n\t\t\t\tspriteData.y += -22;\n\t\t\t} else if (species.isTotem && !options.noScale) {\n\t\t\t\tspriteData.w *= 0.5;\n\t\t\t\tspriteData.h *= 0.5;\n\t\t\t\tspriteData.y += -11;\n\t\t\t}\n\t\t\treturn spriteData;\n\t\t}\n\n\t\t// Mod Cries\n\t\tif (options.mod) {\n\t\t\tspriteData.cryurl = `sprites/${options.mod}/audio/${toID(species.baseSpecies)}`;\n\t\t\tspriteData.cryurl += '.mp3';\n\t\t}\n\n\t\tif (animationData[facing + 'f'] && options.gender === 'F') facing += 'f';\n\t\tlet allowAnim = !Dex.prefs('noanim') && !Dex.prefs('nogif');\n\t\tif (allowAnim && spriteData.gen >= 6) spriteData.pixelated = false;\n\t\tif (allowAnim && animationData[facing] && spriteData.gen >= 5) {\n\t\t\tif (facing.slice(-1) === 'f') name += '-f';\n\t\t\tdir = baseDir + 'ani' + dir;\n\n\t\t\tspriteData.w = animationData[facing].w;\n\t\t\tspriteData.h = animationData[facing].h;\n\t\t\tspriteData.url += dir + '/' + name + '.gif';\n\t\t} else {\n\t\t\t// There is no entry or enough data in pokedex-mini.js\n\t\t\t// Handle these in case-by-case basis; either using BW sprites or matching the played gen.\n\t\t\tdir = (baseDir || 'gen5') + dir;\n\n\t\t\t// Gender differences don't exist prior to Gen 4,\n\t\t\t// so there are no sprites for it\n\t\t\tif (spriteData.gen >= 4 && miscData['frontf'] && options.gender === 'F') {\n\t\t\t\tname += '-f';\n\t\t\t}\n\n\t\t\tspriteData.url += dir + '/' + name + '.png';\n\t\t}\n\n\t\tif (!options.noScale) {\n\t\t\tif (graphicsGen > 4) {\n\t\t\t\t// no scaling\n\t\t\t} else if (spriteData.isFrontSprite) {\n\t\t\t\tspriteData.w *= 2;\n\t\t\t\tspriteData.h *= 2;\n\t\t\t\tspriteData.y += -16;\n\t\t\t} else {\n\t\t\t\t// old gen backsprites are multiplied by 1.5x by the 3D engine\n\t\t\t\tspriteData.w *= 2 / 1.5;\n\t\t\t\tspriteData.h *= 2 / 1.5;\n\t\t\t\tspriteData.y += -11;\n\t\t\t}\n\t\t\tif (spriteData.gen <= 2) spriteData.y += 2;\n\t\t}\n\t\tif (isDynamax && !options.noScale) {\n\t\t\tspriteData.w *= 2;\n\t\t\tspriteData.h *= 2;\n\t\t\tspriteData.y += -22;\n\t\t} else if (species.isTotem && !options.noScale) {\n\t\t\tspriteData.w *= 1.5;\n\t\t\tspriteData.h *= 1.5;\n\t\t\tspriteData.y += -11;\n\t\t}\n\n\t\treturn spriteData;\n\t}\n\n\tgetIFSpriteData(pokemon: Pokemon | Species | string, isFront: boolean, options: {\n\t\tgen?: number,\n\t\tshiny?: boolean,\n\t\tgender?: GenderName,\n\t\tafd?: boolean,\n\t\tnoScale?: boolean,\n\t\tmod?: string,\n\t\tdynamax?: boolean,\n\t} = {gen: 6}): {\n\t\tgen: number;\n\t\tw: number;\n\t\th: number;\n\t\ty: number;\n\t\turl: string;\n\t\tpixelated: boolean;\n\t\tisFrontSprite: boolean;\n\t\tcryurl: string;\n\t\tshiny?: boolean;\n\t} {\n\t\t// battle sprites are 96x96, while teambuilder sprites are 120x120\n\t\tlet spriteData = {\n\t\t\tgen: options.gen || 9,\n\t\t\tw: 96,\n\t\t\th: 96,\n\t\t\ty: 0,\n\t\t\turl: Dex.resourcePrefix + 'sprites/infinitefusion-battle/',\n\t\t\tpixelated: true,\n\t\t\tisFrontSprite: isFront,\n\t\t\tcryurl: '',\n\t\t\tshiny: false,\n\t\t};\n\t\tif (!(pokemon instanceof Pokemon)) {\n\t\t\tspriteData.url += '1/1.1.png';\n\t\t\treturn spriteData;\n\t\t}\n\t\tif (pokemon.volatiles.transform) return this.getSpriteData(pokemon.volatiles.transform[1], isFront, options);\n\t\tlet headname = pokemon.details.split(', ').find(value => value.startsWith('headname:'));\n\t\theadname = headname ? headname.slice(9) : pokemon.name;\n\t\t// const nickname = pokemon.name || headname;\n\t\tconst headSpecies = Dex.species.get(headname);\n\t\tconst bodySpecies = Dex.species.get(pokemon.speciesForme);\n\t\tif (!headSpecies.exists) return this.getSpriteData(pokemon, isFront, {...options, mod: undefined});\n\t\tlet headNum = headSpecies.num;\n\t\tlet bodyNum = bodySpecies.num;\n\t\t// only these two are needed, currently\n\t\tconst specialFusions: {[k: string]: number[]} = {\n\t\t\t'kyuremblack': [644, 646],\n\t\t\t'kyuremwhite': [643, 646],\n\t\t};\n\t\tif (headSpecies.id in specialFusions) [headNum, bodyNum] = specialFusions[headSpecies.id];\n\t\tspriteData.url += `${headNum}/${headNum}.${bodyNum}.png`;\n\t\tspriteData.cryurl = `audio/cries/${headSpecies.id}.mp3`;\n\n\t\tconst request = new XMLHttpRequest();\n\t\tlet found = false;\n\t\trequest.onreadystatechange = function() {\n\t\t\tif (request.readyState === 4) {\n\t\t\t\tif (request.status === 200) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\trequest.open('HEAD', spriteData.url, false);\n\t\t\trequest.send();\n\t\t} catch (e) {}\n\t\tif (!found) return this.getSpriteData(pokemon, isFront, {...options, mod: undefined});\n\n\n\t\tif (!options.noScale) {\n\t\t\tif (spriteData.isFrontSprite) {\n\t\t\t\t// 2 is too big i think\n\t\t\t\tspriteData.w *= 1;\n\t\t\t\tspriteData.h *= 1;\n\t\t\t\tspriteData.y += -10;\n\t\t\t} else {\n\t\t\t\t// old gen backsprites are multiplied by 1.5x by the 3D engine\n\t\t\t\t// just use my own size lol\n\t\t\t\tspriteData.w *= 1.5;\n\t\t\t\tspriteData.h *= 1.5;\n\t\t\t\tspriteData.y += -5;\n\t\t\t}\n\t\t}\n\n\t\treturn spriteData;\n\t}\n\n\tgetPokemonIconNum(id: ID, isFemale?: boolean, facingLeft?: boolean) {\n\t\tlet num = 0;\n\t\tif (window.BattlePokemonSprites?.[id]?.num) {\n\t\t\tnum = BattlePokemonSprites[id].num;\n\t\t} else if (window.BattlePokedex?.[id]?.num) {\n\t\t\tnum = BattlePokedex[id].num;\n\t\t}\n\t\tif (num < 0) num = 0;\n\t\tif (num > 1017) num = 0;\n\n\t\tif (window.BattlePokemonIconIndexes?.[id]) {\n\t\t\tnum = BattlePokemonIconIndexes[id];\n\t\t}\n\n\t\tif (isFemale) {\n\t\t\tif (['unfezant', 'frillish', 'jellicent', 'meowstic', 'pyroar'].includes(id)) {\n\t\t\t\tnum = BattlePokemonIconIndexes[id + 'f'];\n\t\t\t}\n\t\t}\n\t\tif (facingLeft) {\n\t\t\tif (BattlePokemonIconIndexesLeft[id]) {\n\t\t\t\tnum = BattlePokemonIconIndexesLeft[id];\n\t\t\t}\n\t\t}\n\t\treturn num;\n\t}\n\n\tgetPokemonIcon(pokemon: string | Pokemon | ServerPokemon | PokemonSet | null, facingLeft?: boolean) {\n\t\tif (pokemon === 'pokeball') {\n\t\t\treturn `background:transparent url(${Dex.resourcePrefix}sprites/pokemonicons-pokeball-sheet.png) no-repeat scroll -0px 4px`;\n\t\t} else if (pokemon === 'pokeball-statused') {\n\t\t\treturn `background:transparent url(${Dex.resourcePrefix}sprites/pokemonicons-pokeball-sheet.png) no-repeat scroll -40px 4px`;\n\t\t} else if (pokemon === 'pokeball-fainted') {\n\t\t\treturn `background:transparent url(${Dex.resourcePrefix}sprites/pokemonicons-pokeball-sheet.png) no-repeat scroll -80px 4px;opacity:.4;filter:contrast(0)`;\n\t\t} else if (pokemon === 'pokeball-none') {\n\t\t\treturn `background:transparent url(${Dex.resourcePrefix}sprites/pokemonicons-pokeball-sheet.png) no-repeat scroll -80px 4px`;\n\t\t}\n\n\t\tlet id = toID(pokemon);\n\t\tif (!pokemon || typeof pokemon === 'string') pokemon = null;\n\t\t// @ts-ignore\n\t\tif (pokemon?.speciesForme) id = toID(pokemon.speciesForme);\n\t\t// @ts-ignore\n\t\tif (pokemon?.species) id = toID(pokemon.species);\n\t\t// @ts-ignore\n\t\tif (pokemon?.volatiles?.formechange && !pokemon.volatiles.transform) {\n\t\t\t// @ts-ignore\n\t\t\tid = toID(pokemon.volatiles.formechange[1]);\n\t\t}\n\t\tlet num = this.getPokemonIconNum(id, pokemon?.gender === 'F', facingLeft);\n\n\t\tlet top = Math.floor(num / 12) * 30;\n\t\tlet left = (num % 12) * 40;\n\t\tlet fainted = ((pokemon as Pokemon | ServerPokemon)?.fainted ? `;opacity:.3;filter:grayscale(100%) brightness(.5)` : ``);\n\t\treturn `background:transparent url(${Dex.resourcePrefix}sprites/pokemonicons-sheet.png?v14) no-repeat scroll -${left}px -${top}px${fainted}`;\n\t}\n\n\tgetTeambuilderSpriteData(pokemon: any, gen: number = 0): TeambuilderSpriteData {\n\t\tlet id = toID(pokemon.species);\n\t\tlet spriteid = pokemon.spriteid;\n\t\tlet species = Dex.species.get(pokemon.species);\n\t\tif (pokemon.species && !spriteid) {\n\t\t\tspriteid = species.spriteid || toID(pokemon.species);\n\t\t}\n\t\tif (species.exists === false) {\n\t\t\tlet modSpecies = Dex.mod('digimon' as ID).species.get(pokemon.species);\n\t\t\tif (modSpecies.exists === true) {\n\t\t\t\tconst modSpriteData: TeambuilderSpriteData = {\n\t\t\t\t\tspriteid: modSpecies.id,\n\t\t\t\t\tspriteDir: 'sprites/digimon/dex',\n\t\t\t\t\tx: -6,\n\t\t\t\t\ty: 0,\n\t\t\t\t};\n\t\t\t\tif ([\n\t\t\t\t\t'andromon', 'angewomon', 'bakemon', 'darktyranomon', 'geremon', 'hiandromon', 'numemon',\n\t\t\t\t\t'rosemon',\n\t\t\t\t].includes(id)) modSpriteData.y = 14;\n\t\t\t\tif ([\n\t\t\t\t\t'agumon', 'agumonblack', 'blackwargreymon', 'boltmon', 'centalmon', 'deathmeramon', 'diablomon',\n\t\t\t\t\t'garudamon', 'grappuleomon', 'ladydevimon', 'leomon', 'mastertyranomon', 'megaseadramon', 'plotmon',\n\t\t\t\t\t'vamdemon', 'wargreymon', 'weregarurumon', 'weregarurumonblack', 'yukiagumon',\n\t\t\t\t].includes(id)) modSpriteData.y = 7;\n\t\t\t\treturn modSpriteData;\n\t\t\t}\n\t\t\treturn { spriteDir: 'sprites/gen5', spriteid: '0', x: 10, y: 5 };\n\t\t}\n\t\tconst spriteData: TeambuilderSpriteData = {\n\t\t\tspriteid,\n\t\t\tspriteDir: 'sprites/dex',\n\t\t\tx: -2,\n\t\t\ty: -3,\n\t\t};\n\t\tif (pokemon.shiny) spriteData.shiny = true;\n\t\tif (Dex.prefs('nopastgens')) gen = 6;\n\t\tif (Dex.prefs('bwgfx') && gen > 5) gen = 5;\n\t\tlet xydexExists = (!species.isNonstandard || species.isNonstandard === 'Past' || species.isNonstandard === 'CAP') || [\n\t\t\t\"pikachustarter\", \"eeveestarter\", \"meltan\", \"melmetal\", \"pokestarufo\", \"pokestarufo2\", \"pokestarbrycenman\", \"pokestarmt\", \"pokestarmt2\", \"pokestargiant\", \"pokestarhumanoid\", \"pokestarmonster\", \"pokestarf00\", \"pokestarf002\", \"pokestarspirit\",\n\t\t].includes(species.id);\n\t\tif (species.gen === 8 && species.isNonstandard !== 'CAP') xydexExists = false;\n\t\tif ((!gen || gen >= 6) && xydexExists) {\n\t\t\tif (species.gen >= 7) {\n\t\t\t\tspriteData.x = -6;\n\t\t\t\tspriteData.y = -7;\n\t\t\t} else if (id.substr(0, 6) === 'arceus') {\n\t\t\t\tspriteData.x = -2;\n\t\t\t\tspriteData.y = 7;\n\t\t\t} else if (id === 'garchomp') {\n\t\t\t\tspriteData.x = -2;\n\t\t\t\tspriteData.y = 2;\n\t\t\t} else if (id === 'garchompmega') {\n\t\t\t\tspriteData.x = -2;\n\t\t\t\tspriteData.y = 0;\n\t\t\t}\n\t\t\treturn spriteData;\n\t\t}\n\t\tspriteData.spriteDir = 'sprites/gen5';\n\t\tif (gen <= 1 && species.gen <= 1) spriteData.spriteDir = 'sprites/gen1';\n\t\telse if (gen <= 2 && species.gen <= 2) spriteData.spriteDir = 'sprites/gen2';\n\t\telse if (gen <= 3 && species.gen <= 3) spriteData.spriteDir = 'sprites/gen3';\n\t\telse if (gen <= 4 && species.gen <= 4) spriteData.spriteDir = 'sprites/gen4';\n\t\tspriteData.x = 10;\n\t\tspriteData.y = 5;\n\t\treturn spriteData;\n\t}\n\n\t// Nihilslave: get IF Sprites\n\tgetIFTeambuilderSpriteData(pokemon: any, gen: number = 0): TeambuilderSpriteData {\n\t\tlet headSpecies = Dex.species.get(pokemon.name);\n\t\tlet bodySpecies = Dex.species.get(pokemon.species);\n\t\tconst headNum = headSpecies.num;\n\t\tconst bodyNum = bodySpecies.num;\n\t\tif (!headSpecies.exists) return this.getTeambuilderSpriteData(pokemon, gen);\n\t\tconst spriteData: TeambuilderSpriteData = {\n\t\t\tspriteid: `${headNum}/${headNum}.${bodyNum}`,\n\t\t\tspriteDir: 'sprites/infinitefusion',\n\t\t\tx: -2,\n\t\t\ty: -3,\n\t\t};\n\t\tconst url = Dex.resourcePrefix + 'sprites/infinitefusion/' + spriteData.spriteid + '.png';\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.onreadystatechange = function() {\n\t\t\tif (request.readyState === 4) {\n\t\t\t\tif (request.status === 200) {\n\t\t\t\t\tspriteData.shiny = false;\n\t\t\t\t} else {\n\t\t\t\t\tspriteData.shiny = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\trequest.open('HEAD', url, false);\n\t\t\trequest.send();\n\t\t} catch (e) {}\n\n\t\treturn spriteData;\n\t}\n\n\tgetTeambuilderSprite(pokemon: any, gen: number = 0) {\n\t\tif (!pokemon) return '';\n\t\t// Nihilslave: for IF\n\t\tconst data = (pokemon.isIF && !Dex.prefs('noif')) ? this.getIFTeambuilderSpriteData(pokemon, gen) : this.getTeambuilderSpriteData(pokemon, gen);\n\t\tif (pokemon.isIF && data.shiny) return data.spriteid.split('/')[1];\n\t\tconst shiny = (data.shiny ? '-shiny' : '');\n\t\treturn 'background-image:url(' + Dex.resourcePrefix + data.spriteDir + shiny + '/' + data.spriteid + '.png);background-position:' + data.x + 'px ' + data.y + 'px;background-repeat:no-repeat';\n\t}\n\n\tgetItemIcon(item: any) {\n\t\tlet num = 0;\n\t\tif (typeof item === 'string' && exports.BattleItems) item = exports.BattleItems[toID(item)];\n\t\tif (item?.spritenum) num = item.spritenum;\n\n\t\tlet top = Math.floor(num / 16) * 24;\n\t\tlet left = (num % 16) * 24;\n\t\treturn 'background:transparent url(' + Dex.resourcePrefix + 'sprites/itemicons-sheet.png?v1) no-repeat scroll -' + left + 'px -' + top + 'px';\n\t}\n\n\tgetTypeIcon(type: string | null, b?: boolean) { // b is just for utilichart.js\n\t\ttype = this.types.get(type).name;\n\t\tif (!type) type = '???';\n\t\tlet sanitizedType = type.replace(/\\?/g, '%3f');\n\t\treturn `<img src=\"${Dex.resourcePrefix}sprites/types/${sanitizedType}.png\" alt=\"${type}\" height=\"14\" width=\"32\" class=\"pixelated${b ? ' b' : ''}\" />`;\n\t}\n\n\tgetCategoryIcon(category: string | null) {\n\t\tconst categoryID = toID(category);\n\t\tlet sanitizedCategory = '';\n\t\tswitch (categoryID) {\n\t\tcase 'physical':\n\t\tcase 'special':\n\t\tcase 'status':\n\t\t\tsanitizedCategory = categoryID.charAt(0).toUpperCase() + categoryID.slice(1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsanitizedCategory = 'undefined';\n\t\t\tbreak;\n\t\t}\n\t\treturn `<img src=\"${Dex.resourcePrefix}sprites/categories/${sanitizedCategory}.png\" alt=\"${sanitizedCategory}\" height=\"14\" width=\"32\" class=\"pixelated\" />`;\n\t}\n\n\tgetPokeballs() {\n\t\tif (this.pokeballs) return this.pokeballs;\n\t\tthis.pokeballs = [];\n\t\tif (!window.BattleItems) window.BattleItems = {};\n\t\tfor (const data of Object.values(window.BattleItems) as AnyObject[]) {\n\t\t\tif (!data.isPokeball) continue;\n\t\t\tthis.pokeballs.push(data.name);\n\t\t}\n\t\treturn this.pokeballs;\n\t}\n\n\tgetTierSetTable() {\n\t\treturn window.BattleTeambuilderTable;\n\t}\n\tgetLearnsetTable() {\n\t\treturn window.BattleTeambuilderTable;\n\t}\n\n\tgetMovedex() {\n\t\treturn window.BattleMovedex;\n\t}\n\n\tgetTierSet() {\n\t\tconst table = this.getTierSetTable();\n\t\tif (!table.tierSet) {\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\n\t\t\t\treturn [r[0], r[1]];\n\t\t\t});\n\t\t\ttable.tiers = null;\n\t\t}\n\t\treturn table.tierSet.slice(table.formatSlices.AG);\n\t}\n\n\tgetItemSet() {\n\t\tlet table = BattleTeambuilderTable;\n\t\tif (!table.itemSet) {\n\t\t\ttable.itemSet = table.items.map((r: any) => {\n\t\t\t\tif (typeof r === 'string') {\n\t\t\t\t\treturn ['item', r];\n\t\t\t\t}\n\t\t\t\treturn [r[0], r[1]];\n\t\t\t});\n\t\t\ttable.items = null;\n\t\t}\n\t\treturn table.itemSet;\n\t}\n\n\tfirstLearnsetid(speciesid: ID) {\n\t\tconst table = this.getLearnsetTable();\n\t\tif (speciesid in table.learnsets) return speciesid;\n\t\tconst species = this.species.get(speciesid);\n\t\tif (!species.exists) return '' as ID;\n\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\n\t\t}\n\t\tif (baseLearnsetid in table.learnsets) return baseLearnsetid;\n\t\treturn '' as ID;\n\t}\n\tnextLearnsetid(learnsetid: ID, speciesid: ID) {\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\n\t\t\treturn 'rockruffdusk' as ID;\n\t\t}\n\t\tconst lsetSpecies = this.species.get(learnsetid);\n\t\tif (!lsetSpecies.exists) return '' as ID;\n\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\n\t\tif (lsetSpecies.id === 'sinisteaantique') return 'sinistea' as ID;\n\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\n\t\tif (next) return toID(next);\n\n\t\treturn '' as ID;\n\t}\n\tcanLearn(speciesid: ID, moveid: ID) {\n\t\tconst move = this.moves.get(moveid);\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\n\t\twhile (learnsetid) {\n\t\t\tconst table = this.getLearnsetTable();\n\t\t\tlet learnset = table.learnsets[learnsetid];\n\t\t\tif (\n\t\t\t\tlearnset && (moveid in learnset) &&\n\t\t\t\t(\n\t\t\t\t\tlearnset[moveid].includes(this.learnsetGenchar) ||\n\t\t\t\t\t(learnset[moveid].includes(`${this.gen + 1}`) && move.gen === this.gen)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid);\n\t\t}\n\t\treturn false;\n\t}\n\tgetLearnsetMoves(pokemon: PokemonSet) {\n\t\tconst moveDex = window.BattleMovedex;\n\t\tconst moves: string[] = [];\n\t\tlet sketch = false;\n\t\tfor (const id in moveDex) {\n\t\t\tif (!this.canLearn(toID(pokemon.species), id as ID)) continue;\n\t\t\tif (id === 'sketch') sketch = true;\n\t\t\tmoves.push(id);\n\t\t}\n\t\tif (sketch) {\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tif (moves.includes(id)) continue;\n\t\t\t\tconst move = this.moves.get(id);\n\t\t\t\tif (move.isNonstandard) continue;\n\t\t\t\tif (move.noSketch || move.isMax || move.isZ) continue;\n\t\t\t\tmoves.push(id);\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t}\n\n\tgetTypeSet() {\n\t\tconst results: SearchRow[] = [];\n\t\tfor (let id in window.BattleTypeChart) {\n\t\t\tresults.push(['type', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n};\n\nclass ModdedDex {\n\treadonly gen: number;\n\treadonly modid: ID[];\n\treadonly cache = {\n\t\tMoves: {} as any as {[k: string]: Move},\n\t\tItems: {} as any as {[k: string]: Item},\n\t\tAbilities: {} as any as {[k: string]: Ability},\n\t\tSpecies: {} as any as {[k: string]: Species},\n\t\tTypes: {} as any as {[k: string]: Effect},\n\t};\n\tpokeballs: string[] | null = null;\n\tconstructor(modids: ID[]) {\n\t\tthis.gen = parseInt(modids[1].slice(3), 10);\n\t\tthis.modid = modids.slice(2);\n\t}\n\tmoves = {\n\t\tget: (name: string): Move => {\n\t\t\tlet id = toID(name);\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t}\n\t\t\tif (this.cache.Moves.hasOwnProperty(id)) return this.cache.Moves[id];\n\n\t\t\tlet data = {...Dex.moves.get(name)};\n\n\t\t\tfor (let i = Dex.gen - 1; i >= this.gen; i--) {\n\t\t\t\tconst table = window.BattleTeambuilderTable[`gen${i}`];\n\t\t\t\tif (id in table.overrideMoveData) {\n\t\t\t\t\tObject.assign(data, table.overrideMoveData[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.gen <= 3 && data.category !== 'Status') {\n\t\t\t\tdata.category = Dex.getGen3Category(data.type);\n\t\t\t}\n\t\t\tfor (const mid of this.modid) {\n\t\t\t\tif (ModModifier[mid]?.movesMod) ModModifier[mid].movesMod!(data, this);\n\t\t\t}\n\n\t\t\tconst move = new Move(id, name, data);\n\t\t\tif (move.exists) this.cache.Moves[id] = move;\n\t\t\treturn move;\n\t\t},\n\t};\n\n\titems = {\n\t\tget: (name: string): Item => {\n\t\t\tlet id = toID(name);\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t}\n\t\t\tif (this.cache.Items.hasOwnProperty(id)) return this.cache.Items[id];\n\n\t\t\tlet data = {...Dex.items.get(name)};\n\n\t\t\tfor (let i = this.gen; i < 9; i++) {\n\t\t\t\tconst table = window.BattleTeambuilderTable['gen' + i];\n\t\t\t\tif (id in table.overrideItemDesc) {\n\t\t\t\t\tdata.shortDesc = table.overrideItemDesc[id];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const mid of this.modid) {\n\t\t\t\tif (ModModifier[mid]?.itemsMod) ModModifier[mid].itemsMod!(data, this);\n\t\t\t}\n\n\t\t\tconst item = new Item(id, name, data);\n\t\t\tif (item.exists) this.cache.Items[id] = item;\n\t\t\treturn item;\n\t\t},\n\t};\n\n\tabilities = {\n\t\tget: (name: string): Ability => {\n\t\t\tlet id = toID(name);\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t}\n\t\t\tif (this.cache.Abilities.hasOwnProperty(id)) return this.cache.Abilities[id];\n\n\t\t\tlet data = {...Dex.abilities.get(name)};\n\n\t\t\tfor (let i = Dex.gen - 1; i >= this.gen; i--) {\n\t\t\t\tconst table = window.BattleTeambuilderTable[`gen${i}`];\n\t\t\t\tif (id in table.overrideAbilityData) {\n\t\t\t\t\tObject.assign(data, table.overrideAbilityData[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const mid of this.modid) {\n\t\t\t\tif (ModModifier[mid]?.abilitiesMod) ModModifier[mid].abilitiesMod!(data, this);\n\t\t\t}\n\n\t\t\tconst ability = new Ability(id, name, data);\n\t\t\tif (ability.exists) this.cache.Abilities[id] = ability;\n\t\t\treturn ability;\n\t\t},\n\t};\n\n\tspecies = {\n\t\tget: (name: string): Species => {\n\t\t\tlet id = toID(name);\n\t\t\tif (window.BattleAliases && id in BattleAliases) {\n\t\t\t\tname = BattleAliases[id];\n\t\t\t\tid = toID(name);\n\t\t\t}\n\t\t\tif (this.cache.Species.hasOwnProperty(id)) return this.cache.Species[id];\n\n\t\t\tlet data = {...Dex.species.get(name)};\n\n\t\t\tfor (let i = Dex.gen - 1; i >= this.gen; i--) {\n\t\t\t\tconst table = window.BattleTeambuilderTable[`gen${i}`];\n\t\t\t\tif (id in table.overrideSpeciesData) {\n\t\t\t\t\tObject.assign(data, table.overrideSpeciesData[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.gen < 3) {\n\t\t\t\tdata.abilities = {0: \"No Ability\"};\n\t\t\t}\n\t\t\tfor (const mid of this.modid) {\n\t\t\t\tif (ModModifier[mid]?.speciesMod) ModModifier[mid].speciesMod!(data, this);\n\t\t\t}\n\t\t\tif (!data.tier && id.slice(-5) === 'totem') {\n\t\t\t\tdata.tier = this.species.get(id.slice(0, -5)).tier;\n\t\t\t}\n\t\t\tif (!data.tier && data.baseSpecies && toID(data.baseSpecies) !== id) {\n\t\t\t\tdata.tier = this.species.get(data.baseSpecies).tier;\n\t\t\t}\n\t\t\tif (data.gen > this.gen) data.tier = 'Illegal';\n\n\t\t\tconst species = new Species(id, name, data);\n\t\t\tif (species.exists) this.cache.Species[id] = species;\n\t\t\treturn species;\n\t\t},\n\t\t// for species oms\n\t\tgetFromPokemon: (pokemon: Pokemon | ServerPokemon | PokemonSet, extra?: any): Species => {\n\t\t\tfor (const mid of this.modid) {\n\t\t\t\tif (ModModifier[mid]?.ModifySpecies) return ModModifier[mid].ModifySpecies!(pokemon, this, extra);\n\t\t\t}\n\t\t\tconst species = (pokemon as PokemonSet).species || (pokemon as (Pokemon | ServerPokemon)).speciesForme;\n\t\t\treturn this.species.get(species);\n\t\t},\n\t};\n\n\ttypes = {\n\t\tget: (name: string): Effect => {\n\t\t\tconst id = toID(name) as ID;\n\t\t\tname = id.substr(0, 1).toUpperCase() + id.substr(1);\n\n\t\t\tif (this.cache.Types.hasOwnProperty(id)) return this.cache.Types[id];\n\n\t\t\tlet data = {...Dex.types.get(name)};\n\n\t\t\tfor (let i = 7; i >= this.gen; i--) {\n\t\t\t\tconst table = window.BattleTeambuilderTable['gen' + i];\n\t\t\t\tif (id in table.removeType) {\n\t\t\t\t\tdata.exists = false;\n\t\t\t\t\t// don't bother correcting its attributes given it doesn't exist\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (id in table.overrideTypeChart) {\n\t\t\t\t\tdata = {...data, ...table.overrideTypeChart[id]};\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const mid of this.modid) {\n\t\t\t\tif (ModModifier[mid]?.typesMod) ModModifier[mid].typesMod!(data);\n\t\t\t}\n\n\t\t\tif (data.exists) this.cache.Types[id] = data;\n\t\t\treturn data;\n\t\t},\n\t};\n\n\tgetPokeballs() {\n\t\tif (this.pokeballs) return this.pokeballs;\n\t\tthis.pokeballs = [];\n\t\tif (!window.BattleItems) window.BattleItems = {};\n\t\tfor (const data of Object.values(window.BattleItems) as AnyObject[]) {\n\t\t\tif (data.gen && data.gen > this.gen) continue;\n\t\t\tif (!data.isPokeball) continue;\n\t\t\tthis.pokeballs.push(data.name);\n\t\t}\n\t\treturn this.pokeballs;\n\t}\n\n\tgetTierSetTable() {\n\t\t// todo: this is a really bad way to do so, find a better one\n\t\t// todo: i think we need to determine the tierset dynamically for each dex\n\t\tlet BTTable = window.BattleTeambuilderTable;\n\t\tlet table = BTTable;\n\t\tif (this.gen < Dex.gen) table = BTTable[`gen${this.gen}`];\n\t\tif (this.modid.includes('doubles' as ID)) table = BTTable[`gen${this.gen}doubles`];\n\t\tif (this.modid.includes('littlecup' as ID)) table = BTTable[`gen${this.gen}lc`];\n\t\tif (this.modid.includes('nfe' as ID)) table = BTTable[`gen${this.gen}nfe`];\n\t\tif (this.gen === 9 && this.modid.includes('hackmons' as ID)) table = BTTable[`bh`];\n\t\tif (this.modid.includes('natdex' as ID)) table = BTTable[`gen${this.gen}natdex`];\n\t\tif (this.modid.includes('gen7letsgo' as ID)) table = BTTable['gen7letsgo'];\n\t\tif (this.modid.includes('gen8bdsp' as ID)) table = BTTable['gen8bdsp'];\n\t\tif (this.modid.includes('digimon' as ID)) table = window.DigimonTable;\n\t\treturn table;\n\t}\n\tgetLearnsetTable() {\n\t\tif (this.modid.includes('gen7letsgo' as ID)) return window.BattleTeambuilderTable['gen7letsgo'];\n\t\tif (this.modid.includes('gen8bdsp' as ID)) return window.BattleTeambuilderTable['gen8bdsp'];\n\t\tif (this.modid.includes('digimon' as ID)) return window.DigimonTable;\n\t\treturn window.BattleTeambuilderTable;\n\t}\n\n\tgetMovedex() {\n\t\tif (this.modid.includes('digimon' as ID)) return window.DigiMovedex;\n\t\treturn window.BattleMovedex;\n\t}\n\n\tgetTierSet() {\n\t\t// part 1: determine table\n\t\tconst table = this.getTierSetTable();\n\t\tif (!table.tierSet) {\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\n\t\t\t\treturn [r[0], r[1]];\n\t\t\t});\n\t\t\ttable.tiers = null;\n\t\t}\n\t\tconst slices = table.formatSlices;\n\t\tlet tierSet: SearchRow[] = table.tierSet.slice(slices.AG || slices.Uber || slices.DUber); // remove CAP\n\t\t// part 2: filter\n\t\tlet modified = false;\n\t\tfor (const mid of this.modid) {\n\t\t\tif (ModModifier[mid]?.ModifyTierSet) {\n\t\t\t\ttierSet = ModModifier[mid].ModifyTierSet!(tierSet, this, slices);\n\t\t\t\tmodified = true;\n\t\t\t}\n\t\t}\n\t\tif (!modified) {\n\t\t\tif (!this.modid.includes('doubles' as ID)) tierSet = [\n\t\t\t\t...table.tierSet.slice(slices.OU, slices.UU),\n\t\t\t\t...table.tierSet.slice(slices.AG, slices.Uber),\n\t\t\t\t...table.tierSet.slice(slices.Uber, slices.OU),\n\t\t\t\t...table.tierSet.slice(slices.UU),\n\t\t\t];\n\t\t\telse tierSet = [\n\t\t\t\t...tierSet.slice(slices.DOU, slices.DUU),\n\t\t\t\t...tierSet.slice(slices.DUber, slices.DOU),\n\t\t\t\t...tierSet.slice(slices.DUU),\n\t\t\t];\n\t\t}\n\t\treturn tierSet;\n\t}\n\n\tgetItemSet() {\n\t\tlet table = BattleTeambuilderTable;\n\t\tconst petmods = ['natdex', 'gen8bdsp', 'digimon', 'metronome'];\n\t\tfor (const mid of this.modid) {\n\t\t\tif (!petmods.includes(mid)) continue;\n\t\t\tlet _mid = mid;\n\t\t\tif (['natdex', 'metronome'].includes(_mid)) _mid = `gen${this.gen}${_mid}` as ID;\n\t\t\ttable = _mid === ('digimon' as ID) ? window.DigimonTable : window.BattleTeambuilderTable[_mid];\n\t\t\tif (table) break;\n\t\t}\n\t\tif (this.gen < Dex.gen) table = window.BattleTeambuilderTable[`gen${this.gen}`];\n\t\tif (!table.itemSet) {\n\t\t\ttable.itemSet = table.items.map((r: any) => {\n\t\t\t\tif (typeof r === 'string') {\n\t\t\t\t\treturn ['item', r];\n\t\t\t\t}\n\t\t\t\treturn [r[0], r[1]];\n\t\t\t});\n\t\t\ttable.items = null;\n\t\t}\n\t\treturn table.itemSet;\n\t}\n\n\t// the following two may look the same as their counterparts in `Dex`\n\t// but actually different because of `this`\n\tfirstLearnsetid(speciesid: ID) {\n\t\tconst table = this.getLearnsetTable();\n\t\tif (speciesid in table.learnsets) return speciesid;\n\t\tconst species = this.species.get(speciesid);\n\t\tif (!species.exists) return '' as ID;\n\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\n\t\t}\n\t\tif (baseLearnsetid in table.learnsets) return baseLearnsetid;\n\t\treturn '' as ID;\n\t}\n\tnextLearnsetid(learnsetid: ID, speciesid: ID) {\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\n\t\t\treturn 'rockruffdusk' as ID;\n\t\t}\n\t\tconst lsetSpecies = this.species.get(learnsetid);\n\t\tif (!lsetSpecies.exists) return '' as ID;\n\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\n\t\tif (lsetSpecies.id === 'sinisteaantique') return 'sinistea' as ID;\n\t\tif (lsetSpecies.id === 'tatsugiristretchy') return 'tatsugiri' as ID;\n\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\n\t\tif (next) return toID(next);\n\n\t\treturn '' as ID;\n\t}\n\tcanLearn(speciesid: ID, moveid: ID) {\n\t\t// Nihilslave: i made some unequivalent changes to this function, mainly about VGC and tradebacks\n\t\tconst move = this.moves.get(moveid);\n\t\tconst isNatDex = this.modid.includes('natdex' as ID);\n\t\tif (isNatDex && move.isNonstandard && move.isNonstandard !== 'Past') {\n\t\t\treturn false;\n\t\t}\n\t\tconst gen = this.gen;\n\t\tconst genCharTable = ['0', '1', '2', '3', '4', '5', 'p', 'q', 'g', 'a'];\n\t\tconst genChar = (gen === 9 && !isNatDex) ? genCharTable[gen] : `${gen}`;\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\n\t\twhile (learnsetid) {\n\t\t\tconst table = this.getLearnsetTable();\n\t\t\tlet learnset = table.learnsets[learnsetid];\n\t\t\tif (learnset && (moveid in learnset) &&\n\t\t\t\t(learnset[moveid].includes(genChar) || (learnset[moveid].includes(`${gen + 1}`) && move.gen === gen))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid);\n\t\t}\n\t\treturn false;\n\t}\n\tgetLearnsetMoves(pokemon: PokemonSet) {\n\t\tconst moveDex = this.getMovedex();\n\t\tlet moves: string[] = [];\n\t\tlet sketch = false;\n\t\tfor (const id in moveDex) {\n\t\t\tif (!this.canLearn(toID(pokemon.species), id as ID)) continue;\n\t\t\tif (id === 'sketch') sketch = true;\n\t\t\tmoves.push(id);\n\t\t}\n\t\tif (sketch) {\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tif (moves.includes(id)) continue;\n\t\t\t\tconst move = this.moves.get(id);\n\t\t\t\tif (move.isNonstandard) continue;\n\t\t\t\tif (move.noSketch || move.isMax || move.isZ) continue;\n\t\t\t\tmoves.push(id);\n\t\t\t}\n\t\t}\n\t\tfor (const mid of this.modid) {\n\t\t\tif (ModModifier[mid]?.ModifyLearnset) moves = ModModifier[mid].ModifyLearnset!(pokemon, this, moves);\n\t\t}\n\t\treturn moves;\n\t}\n\n\tgetTypeSet() {\n\t\tconst results: SearchRow[] = [];\n\t\tconst chart = this.modid.includes('digimon' as ID) ? window.DigiTypeChart : window.BattleTypeChart;\n\t\tfor (let id in chart) {\n\t\t\tresults.push(['type', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n}\n\n/**\n * todo: we need a real ModdedDex which can take all format names and output corresponding dexes\n * 1. change ModdedDex.modid from string to string[] - done\n * 2. add all old mods in ModModifier - maybe done\n * 3. probably delete BigModdedDex - done\n * 4. add new mods - WI long P\n */\nconst ModModifier: {\n\t[mod: string]: {\n\t\tmovesMod?: (data: any, extra?: any) => any,\n\t\titemsMod?: (data: any, extra?: any) => any,\n\t\tabilitiesMod?: (data: any, extra?: any) => any,\n\t\tspeciesMod?: (data: any, extra?: any) => any,\n\t\ttypesMod?: (data: any, extra?: any) => any,\n\t\tModifySpecies?: (pokemon: Pokemon | ServerPokemon | PokemonSet, dex: ModdedDex, extra?: any) => Species,\n\t\tModifyTierSet?: (tierSet: SearchRow[], dex: ModdedDex, extra?: any) => SearchRow[],\n\t\tModifyLearnset?: (pokemon: PokemonSet, dex: ModdedDex, learnset: string[], extra?: any) => string[],\n\t}\n} = {\n\t// regulars\n\tanythinggoes: {\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet,\n\t},\n\tdoubles: {\n\t\tspeciesMod: (data: any, extra?: any): any => {\n\t\t\tlet gen = 9;\n\t\t\tif (extra && extra.gen) gen = extra.gen;\n\t\t\tconst table = window.BattleTeambuilderTable[`gen${gen}doubles`];\n\t\t\tif (data.id in table.overrideTier) data.tier = table.overrideTier[data.id];\n\t\t},\n\t},\n\tlittlecup: {\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet.slice(\n\t\t\ttierSet.findIndex(([type, value]) => type === 'header' && value === 'LC')\n\t\t),\n\t},\n\tnfe: {\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet.slice(\n\t\t\ttierSet.findIndex(([type, value]) => type === 'header' && value === 'NFEs not in a higher tier')\n\t\t),\n\t},\n\t// oms\n\t'350cup': {\n\t\tspeciesMod: (data: any): any => {\n\t\t\tif (!data.exists) return;\n\t\t\tif (data.bst > 350) return;\n\t\t\tdata.bst = 0;\n\t\t\tlet newStats = {...data.baseStats};\n\t\t\tfor (const stat in data.baseStats) {\n\t\t\t\tnewStats[stat] = data.baseStats[stat] * 2;\n\t\t\t\tif (newStats[stat] < 1) newStats[stat] = 1;\n\t\t\t\tif (newStats[stat] > 255) newStats[stat] = 255;\n\t\t\t\tdata.bst += newStats[stat];\n\t\t\t}\n\t\t\tdata.baseStats = newStats;\n\t\t},\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet,\n\t},\n\t'500cup': {\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet.filter(\n\t\t\t([type, id]) => {\n\t\t\t\tif (type === 'pokemon') {\n\t\t\t\t\tconst bst = dex.species.get(id).bst;\n\t\t\t\t\tif (bst > 500) return false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t),\n\t},\n\t'600cup': {\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet.filter(\n\t\t\t([type, id]) => {\n\t\t\t\tif (type === 'pokemon') {\n\t\t\t\t\tconst bst = dex.species.get(id).bst;\n\t\t\t\t\tif (bst > 600) return false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t),\n\t},\n\tcategoryswap: {\n\t\tmovesMod: (data: any): any => {\n\t\t\tif (!data.exists) return;\n\t\t\tconst categoryMap = {\n\t\t\t\t'Physical': 'Special',\n\t\t\t\t'Special': 'Physical',\n\t\t\t\t'Status': 'Status',\n\t\t\t};\n\t\t\tdata.category = categoryMap[(data as Move).category];\n\t\t},\n\t},\n\thackmons: {\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet,\n\t\tModifyLearnset: (pokemon: PokemonSet, dex: ModdedDex, learnset: string[]): string[] => {\n\t\t\tconst moveDex = dex.getMovedex();\n\t\t\tconst isNatDex = dex.modid.includes('natdex' as ID);\n\t\t\tconst isLGPE = dex.modid.includes('gen7letsgo' as ID);\n\t\t\tconst moves: string[] = [];\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tconst move = dex.moves.get(id);\n\t\t\t\t// moves from future gens also filtered by the following line\n\t\t\t\tif (move.isNonstandard && !['Unobtainable', 'LGPE'].includes(move.isNonstandard)) continue;\n\t\t\t\tif (move.isNonstandard === 'LGPE' && !isLGPE) continue;\n\t\t\t\tif (move.isMax && dex.gen > 8 && !isNatDex) continue;\n\t\t\t\tif (typeof move.isMax === 'string') continue;\n\t\t\t\tif (move.isZ && dex.gen > 7 && !isNatDex) continue;\n\t\t\t\tmoves.push(id);\n\t\t\t}\n\t\t\treturn moves;\n\t\t},\n\t},\n\tmetronome: {\n\t\tspeciesMod: (data: any): any => {\n\t\t\tif (data.num >= 0) data.tier = String(data.num);\n\t\t},\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet,\n\t},\n\tscalemons: {\n\t\tspeciesMod: (data: any, extra?: any): any => {\n\t\t\tif (!data.exists) return;\n\t\t\tconst cupName = (extra && (extra.modid as ID[]).find(id => id.includes('cup'))) || '600cup';\n\t\t\tconst goalBST = parseInt(cupName.slice(0, 3))\n\t\t\tconst bstWithoutHp: number = data.bst - data.baseStats['hp'];\n\t\t\tconst scale = goalBST - data.baseStats['hp'];\n\t\t\tdata.bst = data.baseStats['hp'];\n\t\t\tlet newStats = {...data.baseStats};\n\t\t\tfor (const stat in data.baseStats) {\n\t\t\t\tif (stat === 'hp') continue;\n\t\t\t\tnewStats[stat] = Math.floor(data.baseStats[stat] * scale / bstWithoutHp);\n\t\t\t\tif (newStats[stat] < 1) newStats[stat] = 1;\n\t\t\t\tif (newStats[stat] > 255) newStats[stat] = 255;\n\t\t\t\tdata.bst += newStats[stat];\n\t\t\t}\n\t\t\tdata.baseStats = newStats;\n\t\t},\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet,\n\t},\n\tstabmons: {\n\t\tModifyLearnset: (pokemon: PokemonSet, dex: ModdedDex, learnset: string[]): string[] => {\n\t\t\tconst moveDex = dex.getMovedex();\n\t\t\tconst isNatDex = dex.modid.includes('natdex' as ID);\n\t\t\tconst isLGPE = dex.modid.includes('gen7letsgo' as ID);\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tif (learnset.includes(id)) continue;\n\t\t\t\tconst move = dex.moves.get(id);\n\t\t\t\tif (move.isNonstandard && move.isNonstandard !== 'Unobtainable') continue;\n\t\t\t\tif (move.isZ || move.isMax) continue;\n\n\t\t\t\tlet species = dex.species.get(pokemon.species);\n\t\t\t\tconst speciesTypes: string[] = [];\n\t\t\t\tconst moveTypes: string[] = [];\n\t\t\t\tfor (let i = dex.gen; i >= species.gen && i >= move.gen; i--) {\n\t\t\t\t\tconst genDex = Dex.forGen(i);\n\t\t\t\t\tmoveTypes.push(genDex.moves.get(move.name).type);\n\n\t\t\t\t\tconst pokemon = genDex.species.get(species.name);\n\t\t\t\t\tlet baseSpecies = genDex.species.get(pokemon.changesFrom || pokemon.name);\n\t\t\t\t\tif (!pokemon.battleOnly) speciesTypes.push(...pokemon.types);\n\t\t\t\t\tlet prevo = pokemon.prevo;\n\t\t\t\t\twhile (prevo) {\n\t\t\t\t\t\tconst prevoSpecies = genDex.species.get(prevo);\n\t\t\t\t\t\tspeciesTypes.push(...prevoSpecies.types);\n\t\t\t\t\t\tprevo = prevoSpecies.prevo;\n\t\t\t\t\t}\n\t\t\t\t\tif (pokemon.battleOnly && typeof pokemon.battleOnly === 'string') {\n\t\t\t\t\t\tspecies = dex.species.get(pokemon.battleOnly);\n\t\t\t\t\t}\n\t\t\t\t\tconst excludedForme = (s: Species) => [\n\t\t\t\t\t\t'Alola', 'Alola-Totem', 'Galar', 'Galar-Zen', 'Hisui', 'Paldea', 'Paldea-Combat', 'Paldea-Blaze', 'Paldea-Aqua',\n\t\t\t\t\t].includes(s.forme);\n\t\t\t\t\tif (baseSpecies.otherFormes && !['Wormadam', 'Urshifu'].includes(baseSpecies.baseSpecies)) {\n\t\t\t\t\t\tif (!excludedForme(species)) speciesTypes.push(...baseSpecies.types);\n\t\t\t\t\t\tfor (const formeName of baseSpecies.otherFormes) {\n\t\t\t\t\t\t\tconst forme = dex.species.get(formeName);\n\t\t\t\t\t\t\tif (!forme.battleOnly && !excludedForme(forme)) speciesTypes.push(...forme.types);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet valid = false;\n\t\t\t\tfor (let type of moveTypes) {\n\t\t\t\t\tif (speciesTypes.includes(type)) {\n\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (valid) learnset.push(id);\n\t\t\t}\n\t\t\treturn learnset;\n\t\t},\n\t},\n\tthecardgame: {\n\t\tmovesMod: (data: any): any => {\n\t\t\tif (!data.exists) return;\n\t\t\tdata.type = data.type\n\t\t\t\t.replace(/(Ghost|Fairy)/g, 'Psychic')\n\t\t\t\t.replace(/Bug/g, 'Grass')\n\t\t\t\t.replace(/Ice/g, 'Water')\n\t\t\t\t.replace(/(Rock|Ground)/g, 'Fighting')\n\t\t\t\t.replace(/Flying/g, 'Normal')\n\t\t\t\t.replace(/Poison/g, 'Dark');\n\t\t},\n\t\tspeciesMod: (data: any): any => {\n\t\t\tif (!data.exists) return;\n\t\t\tdata.types = Array.from(new Set(data.types.map((type: TypeName) => (\n\t\t\t\ttype.replace(/(Ghost|Fairy)/g, 'Psychic')\n\t\t\t\t\t.replace(/Bug/g, 'Grass')\n\t\t\t\t\t.replace(/Ice/g, 'Water')\n\t\t\t\t\t.replace(/(Rock|Ground)/g, 'Fighting')\n\t\t\t\t\t.replace(/Flying/g, 'Normal')\n\t\t\t\t\t.replace(/Poison/g, 'Dark')\n\t\t\t))));\n\t\t},\n\t},\n\t// species oms\n\tcreatemons: {\n\t\tModifySpecies: (pokemon: Pokemon | ServerPokemon | PokemonSet, dex: ModdedDex, extra?: any): Species => {\n\t\t\tconst species = dex.species.get((pokemon as Pokemon | ServerPokemon).speciesForme || (pokemon as PokemonSet).species);\n\t\t\t// in Teambuilder\n\t\t\tlet evs = (pokemon as PokemonSet).evs;\n\t\t\tlet types = [(pokemon as PokemonSet).hpType, (pokemon as PokemonSet).teraType];\n\t\t\t// in Battle\n\t\t\tif (!evs) {\n\t\t\t\tconst details = (pokemon as Pokemon | ServerPokemon).details;\n\t\t\t\tconst crtmInfo = (details.split(', ').find(value => value.startsWith('createmons:')) || '').slice(11);\n\t\t\t\tif (crtmInfo) {\n\t\t\t\t\tevs = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n\t\t\t\t\tconst evsArray = crtmInfo.split(',').slice(0, 6).map(Number);\n\t\t\t\t\tlet i: StatName;\n\t\t\t\t\tfor (i in evs) evs[i] = evsArray.shift() || 0;\n\t\t\t\t\ttypes = crtmInfo.split(',').slice(6);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// no extra info\n\t\t\tif (!evs) return species;\n\t\t\ttypes = Array.from(new Set(types));\n\t\t\treturn new Species(species.id, species.name, {...species, baseStats: evs, types: types});\n\t\t},\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet,\n\t\tModifyLearnset: (pokemon: PokemonSet, dex: ModdedDex, learnset: string[]): string[] => {\n\t\t\tconst moveDex = dex.getMovedex();\n\t\t\tconst moves: string[] = [];\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tconst move = dex.moves.get(id);\n\t\t\t\tif (move.isNonstandard === 'CAP') continue;\n\t\t\t\tif (move.isMax || move.isZ) continue;\n\t\t\t\tmoves.push(id);\n\t\t\t}\n\t\t\treturn moves;\n\t\t},\n\t},\n\tcrossevolution: {\n\t\tModifySpecies: (pokemon: Pokemon | ServerPokemon | PokemonSet, dex: ModdedDex, extra?: any): Species => {\n\t\t\tconst nameString = pokemon.name || '';\n\t\t\t// note that you can't know ur opponent pokemon's nickname before it is sent in\n\t\t\tconst speciesString = (pokemon as PokemonSet).species || (pokemon as (Pokemon | ServerPokemon)).speciesForme;\n\t\t\tconst species = dex.species.get(speciesString);\n\t\t\tif (nameString !== speciesString) {\n\t\t\t\tconst crossSpecies = dex.species.get(nameString);\n\t\t\t\tif (!!crossSpecies.exists && crossSpecies.prevo) {\n\t\t\t\t\tconst crossPrevoSpecies = dex.species.get(crossSpecies.prevo);\n\t\t\t\t\tif (!crossPrevoSpecies.prevo === !species.prevo) {\n\t\t\t\t\t\tconst mixedSpecies = {...species};\n\t\t\t\t\t\tmixedSpecies.bst = 0;\n\t\t\t\t\t\tlet stat: StatName;\n\t\t\t\t\t\tlet newStats = {...mixedSpecies.baseStats};\n\t\t\t\t\t\tfor (stat in mixedSpecies.baseStats) {\n\t\t\t\t\t\t\tnewStats[stat] += crossSpecies.baseStats[stat] - crossPrevoSpecies.baseStats[stat];\n\t\t\t\t\t\t\tif (newStats[stat] < 1) newStats[stat] = 1;\n\t\t\t\t\t\t\tif (newStats[stat] > 255) newStats[stat] = 255;\n\t\t\t\t\t\t\tmixedSpecies.bst += newStats[stat];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmixedSpecies.baseStats = newStats;\n\t\t\t\t\t\tlet newTypes = [...mixedSpecies.types];\n\t\t\t\t\t\tif (crossSpecies.types[0] !== crossPrevoSpecies.types[0]) newTypes[0] = crossSpecies.types[0];\n\t\t\t\t\t\tif (crossSpecies.types[1] !== crossPrevoSpecies.types[1]) newTypes[1] = crossSpecies.types[1] || crossSpecies.types[0];\n\t\t\t\t\t\tif (newTypes[0] === newTypes[1]) newTypes = [newTypes[0]];\n\t\t\t\t\t\tmixedSpecies.types = newTypes;\n\t\t\t\t\t\tmixedSpecies.abilities = crossSpecies.abilities;\n\t\t\t\t\t\treturn new Species(mixedSpecies.id, mixedSpecies.name, {...mixedSpecies});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn species;\n\t\t},\n\t\tModifyLearnset: (pokemon: PokemonSet, dex: ModdedDex, learnset: string[]): string[] => {\n\t\t\tconst name = pokemon.name || '';\n\t\t\tconst crossSpecies = dex.species.get(name);\n\t\t\tif (!crossSpecies.exists) return learnset;\n\t\t\tconst moveDex = dex.getMovedex();\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tif (learnset.includes(id)) continue;\n\t\t\t\tif (dex.canLearn(crossSpecies.id, id as ID)) learnset.push(id);\n\t\t\t}\n\t\t\treturn learnset;\n\t\t},\n\t},\n\tinfinitefusion: {\n\t\tModifySpecies: (pokemon: Pokemon | ServerPokemon | PokemonSet, dex: ModdedDex, extra?: any): Species => {\n\t\t\tlet name = '';\n\t\t\t// tips: ServerPokemon is what you know about your opponent's pokemon\n\t\t\tif ((pokemon as Pokemon | ServerPokemon).details) {\n\t\t\t\tconst details = (pokemon as Pokemon | ServerPokemon).details;\n\t\t\t\tname = (details.split(', ').find(value => value.startsWith('headname:')) || '').slice(9);\n\t\t\t}\n\t\t\tif (name === '') { // teambuilder & mySidePokemon when TeamPreview\n\t\t\t\tname = pokemon.name || '';\n\t\t\t}\n\t\t\tconst species = (pokemon as PokemonSet).species || (pokemon as (Pokemon | ServerPokemon)).speciesForme;\n\t\t\tconst headSpecies = dex.species.get(name);\n\t\t\tconst bodySpecies = dex.species.get(species);\n\t\t\tif (!headSpecies.exists || !bodySpecies.exists) return new Species(bodySpecies.id, bodySpecies.name, {...bodySpecies});\n\t\t\tif (headSpecies.baseSpecies !== headSpecies.name || bodySpecies.baseSpecies !== bodySpecies.name) return new Species(bodySpecies.id, bodySpecies.name, {...bodySpecies});\n\t\t\tconst nonstandard = ['CAP', 'Custom'];\n\t\t\tif (headSpecies.isNonstandard && nonstandard.includes(headSpecies.isNonstandard) ||\n\t\t\t\tbodySpecies.isNonstandard && nonstandard.includes(bodySpecies.isNonstandard)\n\t\t\t) return new Species(bodySpecies.id, bodySpecies.name, {...bodySpecies});\n\t\t\tif (headSpecies.name === bodySpecies.name) {\n\t\t\t\tconst specialSelfFusions: {[k: string]: string} = {\n\t\t\t\t\tdeoxys: 'Deoxys-Attack',\n\t\t\t\t\trotom: 'Rotom-Heat',\n\t\t\t\t\tshaymin: 'Shaymin-Sky',\n\t\t\t\t\tkeldeo: 'Keldeo-Resolute',\n\t\t\t\t\tmeloetta: 'Meloetta-Pirouette',\n\t\t\t\t\tgreninja: 'Greninja-Ash',\n\t\t\t\t\tfloette: 'Floette-Eternal',\n\t\t\t\t\tzygarde: 'Zygarde-Complete',\n\t\t\t\t\thoopa: 'Hoopa-Unbound',\n\t\t\t\t\tlycanroc: 'Lycanroc-Dusk',\n\t\t\t\t\twishiwashi: 'Wishiwashi-School',\n\t\t\t\t\tnecrozma: 'Necrozma-Ultra',\n\t\t\t\t\teternatus: 'Eternatus-Eternamax',\n\t\t\t\t\tpalafin: 'Palafin-Hero',\n\t\t\t\t\togerpon: 'Ogerpon-Wellspring',\n\t\t\t\t};\n\t\t\t\tif (toID(headSpecies.name) in specialSelfFusions) {\n\t\t\t\t\treturn dex.species.get(specialSelfFusions[toID(headSpecies.name)]);\n\t\t\t\t}\n\t\t\t\tif (headSpecies.otherFormes) {\n\t\t\t\t\tfor (const forme of headSpecies.otherFormes) {\n\t\t\t\t\t\tif (forme.endsWith('-Mega') || forme.endsWith('-Mega-Y') ||\n\t\t\t\t\t\t\tforme.endsWith('-Primal') ||\n\t\t\t\t\t\t\tforme.endsWith('-Origin') ||\n\t\t\t\t\t\t\tforme.endsWith('-Therian') ||\n\t\t\t\t\t\t\tforme.endsWith('-Starter') ||\n\t\t\t\t\t\t\tforme.endsWith('-Crowned')\n\t\t\t\t\t\t) return dex.species.get(forme);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn new Species(bodySpecies.id, bodySpecies.name, {...bodySpecies});\n\t\t\t}\n\t\t\tconst pair = [headSpecies.name, bodySpecies.name].sort();\n\t\t\tif (pair[0] === 'Kyurem' && pair[1] === 'Reshiram') return dex.species.get('Kyurem-White');\n\t\t\tif (pair[0] === 'Kyurem' && pair[1] === 'Zekrom') return dex.species.get('Kyurem-Black');\n\t\t\tif (pair[0] === 'Necrozma' && pair[1] === 'Solgaleo') return dex.species.get('Necrozma-Dusk-Mane');\n\t\t\tif (pair[0] === 'Lunala' && pair[1] === 'Necrozma') return dex.species.get('Necrozma-Dawn-Wings');\n\t\t\tif (pair[0] === 'Calyrex' && pair[1] === 'Glastrier') return dex.species.get('Calyrex-Ice');\n\t\t\tif (pair[0] === 'Calyrex' && pair[1] === 'Spectrier') return dex.species.get('Calyrex-Shadow');\n\t\t\tif (pair[0] === 'Arrokuda' && pair[1] === 'Cramorant') return dex.species.get('Cramorant-Gulping');\n\t\t\tif (pair[0] === 'Cramorant' && pair[1] === 'Pikachu') return dex.species.get('Cramorant-Gorging');\n\n\t\t\tconst fusionSpecies = {...bodySpecies};\n\t\t\tfusionSpecies.weightkg = Math.max(0.1, (headSpecies.weightkg + bodySpecies.weightkg) / 2);\n\t\t\t// fusionSpecies.evos\n\t\t\tfusionSpecies.abilities = {\n\t\t\t\t0: headSpecies.abilities[0],\n\t\t\t\t1: bodySpecies.abilities[1] || bodySpecies.abilities[0],\n\t\t\t\tH: headSpecies.abilities['H'],\n\t\t\t\tS: headSpecies.abilities['S'],\n\t\t\t};\n\t\t\tfusionSpecies.bst = 0;\n\t\t\tlet i: StatName;\n\t\t\tlet newStats = {...fusionSpecies.baseStats};\n\t\t\tfor (i in fusionSpecies.baseStats) {\n\t\t\t\tlet headStat, bodyStat;\n\t\t\t\tif (['hp', 'spa', 'spd'].includes(i)) {\n\t\t\t\t\theadStat = headSpecies.baseStats[i] * 2;\n\t\t\t\t\tbodyStat = bodySpecies.baseStats[i];\n\t\t\t\t} else {\n\t\t\t\t\theadStat = headSpecies.baseStats[i];\n\t\t\t\t\tbodyStat = bodySpecies.baseStats[i] * 2;\n\t\t\t\t}\n\t\t\t\tlet stat = Math.floor((headStat + bodyStat) / 3);\n\t\t\t\tif (stat < 1) stat = 1;\n\t\t\t\tif (stat > 255) stat = 255;\n\t\t\t\tif (i === 'hp' && (pokemon as PokemonSet).ability === 'Wonder Guard') stat = 1;\n\t\t\t\tnewStats[i] = stat;\n\t\t\t\tfusionSpecies.bst += stat;\n\t\t\t}\n\t\t\tfusionSpecies.baseStats = newStats;\n\t\t\tlet newTypes = [headSpecies.types[0], bodySpecies.types[1] || bodySpecies.types[0]];\n\t\t\tif (newTypes[1] === newTypes[0]) newTypes = [newTypes[0]];\n\t\t\tfusionSpecies.types = newTypes;\n\n\t\t\treturn new Species(fusionSpecies.id, fusionSpecies.name, {...fusionSpecies});\n\t\t},\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet.filter(\n\t\t\t([type, id]) => {\n\t\t\t\tif (type === 'pokemon') {\n\t\t\t\t\tconst sp = dex.species.get(id);\n\t\t\t\t\tif (sp.baseSpecies !== sp.name) return false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t),\n\t\tModifyLearnset: (pokemon: PokemonSet, dex: ModdedDex, learnset: string[]): string[] => {\n\t\t\tconst name = pokemon.name || '';\n\t\t\tconst headSpecies = dex.species.get(name);\n\t\t\tif (!headSpecies.exists) return learnset;\n\t\t\tconst fusionSpecies = dex.species.getFromPokemon(pokemon);\n\t\t\tconst moveDex = dex.getMovedex();\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tif (learnset.includes(id)) continue;\n\t\t\t\tif (!dex.canLearn(headSpecies.id, id as ID) && !dex.canLearn(fusionSpecies.id, id as ID)) continue;\n\t\t\t\tlearnset.push(id);\n\t\t\t}\n\t\t\treturn learnset;\n\t\t},\n\t},\n\t// pet mods\n\tnatdex: {\n\t\tmovesMod: (data: any): any => {\n\t\t\tif (data.isNonstandard === 'Past') data.isNonstandard = null;\n\t\t},\n\t\tspeciesMod: (data: any, extra?: any): any => {\n\t\t\tlet gen = 9;\n\t\t\tif (extra && extra.gen) gen = extra.gen;\n\t\t\tconst table = window.BattleTeambuilderTable[`gen${gen}natdex`];\n\t\t\tif (data.id in table.overrideTier) data.tier = table.overrideTier[data.id];\n\t\t},\n\t},\n\tgen7letsgo: {\n\t\tmovesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen7letsgo'];\n\t\t\tif (data.id in table.overrideMoveData) Object.assign(data, table.overrideMoveData[data.id]);\n\t\t},\n\t\titemsMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen7letsgo'];\n\t\t\tif (data.id in table.overrideItemDesc) data.shortDesc = table.overrideItemDesc[data.id];\n\t\t},\n\t\tabilitiesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen7letsgo'];\n\t\t\tif (data.id in table.overrideAbilityData) Object.assign(data, table.overrideAbilityData[data.id]);\n\t\t},\n\t\tspeciesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen7letsgo'];\n\t\t\tif (data.id in table.overrideSpeciesData) Object.assign(data, table.overrideSpeciesData[data.id]);\n\t\t\tdata.abilities = {0: \"No Ability\"};\n\t\t\tif (data.id in table.overrideTier) data.tier = table.overrideTier[data.id];\n\t\t},\n\t},\n\tgen8bdsp: {\n\t\tmovesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen8bdsp'];\n\t\t\tif (data.id in table.overrideMoveData) Object.assign(data, table.overrideMoveData[data.id]);\n\t\t},\n\t\titemsMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen8bdsp'];\n\t\t\tif (data.id in table.overrideItemDesc) data.shortDesc = table.overrideItemDesc[data.id];\n\t\t},\n\t\tabilitiesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen8bdsp'];\n\t\t\tif (data.id in table.overrideAbilityData) Object.assign(data, table.overrideAbilityData[data.id]);\n\t\t},\n\t\tspeciesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen8bdsp'];\n\t\t\tif (data.id in table.overrideSpeciesData) Object.assign(data, table.overrideSpeciesData[data.id]);\n\t\t\tif (data.id in table.overrideTier) data.tier = table.overrideTier[data.id];\n\t\t},\n\t},\n\tgen9morebalancedhackmons: {\n\t\tmovesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen9morebalancedhackmons'];\n\t\t\tif (data.id in table.overrideMoveData) Object.assign(data, table.overrideMoveData[data.id]);\n\t\t},\n\t\titemsMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen9morebalancedhackmons'];\n\t\t\tif (data.id in table.overrideItemDesc) data.shortDesc = table.overrideItemDesc[data.id];\n\t\t},\n\t\tabilitiesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen9morebalancedhackmons'];\n\t\t\tif (data.id in table.overrideAbilityData) Object.assign(data, table.overrideAbilityData[data.id]);\n\t\t},\n\t\tspeciesMod: (data: any): any => {\n\t\t\tconst table = window.BattleTeambuilderTable['gen9morebalancedhackmons'];\n\t\t\tif (data.id in table.overrideSpeciesData) Object.assign(data, table.overrideSpeciesData[data.id]);\n\t\t},\n\t\tModifyTierSet: (tierSet: SearchRow[], dex: ModdedDex, extra?: any): SearchRow[] => tierSet,\n\t},\n\tdigimon: {\n\t\tmovesMod: (data: any): any => {\n\t\t\t// if (data.exists === true) return;\n\t\t\tif (data.id in window.DigiMovedex) {\n\t\t\t\tObject.assign(data, window.DigiMovedex[data.id]);\n\t\t\t\tdata.exists = true;\n\t\t\t}\n\t\t},\n\t\titemsMod: (data: any): any => {\n\t\t\t// if (data.exists === true) return;\n\t\t\tif (data.id in window.DigiItems) {\n\t\t\t\tObject.assign(data, window.DigiItems[data.id]);\n\t\t\t\tdata.exists = true;\n\t\t\t}\n\t\t},\n\t\tabilitiesMod: (data: any): any => {\n\t\t\t// if (data.exists === true) return;\n\t\t\tif (data.id in window.DigiAbilities) {\n\t\t\t\tObject.assign(data, window.DigiAbilities[data.id]);\n\t\t\t\tdata.exists = true;\n\t\t\t}\n\t\t},\n\t\tspeciesMod: (data: any): any => {\n\t\t\t// if (data.exists === true) return;\n\t\t\tif (data.id in window.Digidex) {\n\t\t\t\tObject.assign(data, window.Digidex[data.id]);\n\t\t\t\tdata.exists = true;\n\t\t\t}\n\t\t},\n\t\ttypesMod: (data: any): any => {\n\t\t\t// todo: don't let fairy type pass\n\t\t\t// hint: removeType\n\t\t\tlet typeData = window.DigiTypeChart[data.id];\n\t\t\tif (typeData && typeData.damageTaken) {\n\t\t\t\ttypeData.exists = true;\n\t\t\t\t// what does the following 3 lines do?\n\t\t\t\tif (!typeData.id) typeData.id = data.id;\n\t\t\t\tif (!typeData.name) typeData.name = data.name;\n\t\t\t\tif (!typeData.effectType) typeData.effectType = 'Type';\n\t\t\t\tdata = {...typeData};\n\t\t\t}\n\t\t},\n\t\tModifyLearnset: (pokemon: PokemonSet, dex: ModdedDex, learnset: string[]): string[] => {\n\t\t\tif (!pokemon.preEvo) return learnset;\n\t\t\tconst preEvoSpecies = dex.species.get(pokemon.preEvo);\n\t\t\tconst moveDex = dex.getMovedex();\n\t\t\tfor (const id in moveDex) {\n\t\t\t\tif (learnset.includes(id)) continue;\n\t\t\t\tif (!dex.canLearn(preEvoSpecies.id, id as ID)) continue;\n\t\t\t\tlearnset.push(id);\n\t\t\t}\n\t\t\treturn learnset;\n\t\t},\n\t},\n}\n\nif (typeof require === 'function') {\n\t// in Node\n\t(global as any).Dex = Dex;\n\t(global as any).toID = toID;\n}\n"],"mappings":"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"}