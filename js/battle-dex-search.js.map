{"version":3,"file":"battle-dex-search.js","names":["DexSearch","searchType","arguments","length","undefined","formatid","species","query","dex","Dex","typedSearch","results","exactMatch","firstPokemonColumn","sortCol","reverseSort","filters","setType","_proto","prototype","getTypedSearch","format","speciesOrSet","BattlePokemonSearch","BattleItemSearch","BattleMoveSearch","BattleAbilitySearch","BattleTypeSearch","BattleCategorySearch","find","toID","_this$typedSearch","getResults","textSearch","_this$typedSearch2","addFilter","entry","type","includes","_i2","_this$filters2","filter","push","removeFilter","filterid","join","deleted","i","splice","pop","toggleSort","filterLabel","filterType","illegalLabel","id","_this$typedSearch3","_this$typedSearch3$il","illegalReasons","getTier","_this$typedSearch4","_this$typedSearch5","_this$typedSearch6","searchIndex","BattleSearchIndex","searchIndexOffset","BattleSearchIndexOffset","closest","getClosest","modid","DigimonSearchIndex","DigimonSearchIndexOffset","left","right","mid","Math","floor","searchTypeIndex","typeTable","qFilterType","slice","window","BattleTypeChart","passType","searchPasses","queryAlias","BattleAliases","aliasPassType","unshift","substr","matchLength","matchQuery","bufs","topbufIndex","count","nearMatch","instafilter","instafilterSort","illegal","searchPass","shift","typeIndex","gen","startsWith","matchStart","matchEnd","originalIndex","charCodeAt","typeName","curBufLength","topbuf","concat","Array","apply","fType","fId","_this$typedSearch7","buf","illegalBuf","charAt","toUpperCase","BattlePokedex","types","get","ability","abilities","name","hasAbility","BattleMovedex","category","pokemon","tier","move","item","egggroup","article","BattleTypedSearch","formats","set","baseResults","baseIllegalResults","sortRow","mod","_proto2","_this","getDefaultResults","call","getBaseResults","legalityFilter","_i4","_this$baseResults2","_ref","resultType","value","getTable","illegalResults","_i6","_this$baseResults4","result","_i8","_this$baseIllegalResu2","_ref2","rowType","sort","_ref3","firstLearnsetid","speciesid","nextLearnsetid","learnsetid","canLearn","moveid","_BattleTypedSearch","_inheritsLoose","_this2","_len","args","_key","_proto3","getTierSet","row","_i10","_ref4","eggGroups","_this3","sortOrder","_ref5","_ref6","rowType1","id1","rowType2","id2","stat1","baseStats","stat2","_ref7","_ref8","base1","base2","bst1","hp","atk","def","spa","spd","spe","bst2","_ref9","_ref10","name1","name2","Error","_BattleTypedSearch2","_proto4","BattleAbilities","skipped","getFromPokemon","speciesAbilities","Object","assign","abilitySet","isMega","baseSpecies","forme","_i12","_ref11","_BattleTypedSearch3","_proto5","BattleItems","getItemSet","speciesName","speciesSpecific","_i14","_this$dex$items$get$i","items","itemUser","_i16","_ref12","_BattleTypedSearch4","_this4","_len2","_key2","_proto6","moveIsNotUseless","moves","_moveData$flags","_moveData$flags2","_moveData$flags3","abilityid","itemid","weightkg","evos","endsWith","GOOD_DOUBLES_MOVES","moveData","GOOD_STATUS_MOVES","basePower","GOOD_WEAK_MOVES","flags","charge","recharge","slicing","BAD_STRONG_MOVES","getLearnsetMoves","usableMoves","uselessMoves","_i18","isUsable","_i20","_ref13","_this5","powerTable","frustration","spitup","trumpcard","naturalgift","grassknot","lowkick","gyroball","electroball","flail","reversal","present","wringout","crushgrip","heatcrash","heavyslam","fling","magnitude","beatup","punishment","psywave","nightshade","seismictoss","dragonrage","sonicboom","superfang","endeavor","sheercold","fissure","horndrill","guillotine","_ref14","_ref15","move1","move2","pow1","pow2","_ref16","_ref17","accuracy1","accuracy","accuracy2","_ref18","_ref19","pp1","pp","pp2","_ref20","_ref21","_BattleTypedSearch5","_proto7","physical","special","status","_BattleTypedSearch6","_proto8","getTypeSet"],"sources":["../src/battle-dex-search.ts"],"sourcesContent":["/**\n * Search\n *\n * Code for searching for dex information, used by the Dex and\n * Teambuilder.\n *\n * Dependencies: battledata, search-index\n * Optional dependencies: pokedex, moves, items, abilities\n *\n * @author Guangcong Luo <guangcongluo@gmail.com>\n * @license MIT\n */\n\ntype SearchType = (\n\t'pokemon' | 'type' | 'tier' | 'move' | 'item' | 'ability' | 'egggroup' | 'category' | 'article'\n);\n\ntype SearchRow = (\n\t[SearchType, ID, number?, number?] | ['sortpokemon' | 'sortmove', ''] | ['header' | 'html', string]\n);\n\ntype SearchFilter = [string, string];\n\n/** ID, SearchType, index (if alias), offset (if offset alias) */\ndeclare const BattleSearchIndex: [ID, SearchType, number?, number?][];\ndeclare const BattleSearchIndexOffset: any;\ndeclare const BattleTeambuilderTable: any;\n// digimon\ndeclare const DigimonSearchIndex: [ID, SearchType, number?, number?][];\ndeclare const DigimonSearchIndexOffset: any;\ndeclare const DigimonTable: any;\n\n/**\n * Backend for search UIs.\n */\nclass DexSearch {\n\tquery = '';\n\n\t/**\n\t * Dex for the mod/generation to search.\n\t */\n\tdex: ModdedDex = Dex;\n\n\ttypedSearch: BattleTypedSearch<SearchType> | null = null;\n\n\tresults: SearchRow[] | null = null;\n\texactMatch = false;\n\n\tstatic typeTable = {\n\t\tpokemon: 1,\n\t\ttype: 2,\n\t\ttier: 3,\n\t\tmove: 4,\n\t\titem: 5,\n\t\tability: 6,\n\t\tegggroup: 7,\n\t\tcategory: 8,\n\t\tarticle: 9,\n\t};\n\tstatic typeName = {\n\t\tpokemon: 'Pok&eacute;mon',\n\t\ttype: 'Type',\n\t\ttier: 'Tiers',\n\t\tmove: 'Moves',\n\t\titem: 'Items',\n\t\tability: 'Abilities',\n\t\tegggroup: 'Egg group',\n\t\tcategory: 'Category',\n\t\tarticle: 'Article',\n\t};\n\tfirstPokemonColumn: 'Tier' | 'Number' = 'Number';\n\n\t/**\n\t * Column to sort by. Default is `null`, a smart sort determined by how good\n\t * things are according to the base filters, falling back to dex number (for\n\t * Pokemon) and name (for everything else).\n\t */\n\tsortCol: string | null = null;\n\treverseSort = false;\n\n\t/**\n\t * Filters for the search result. Does not include the two base filters\n\t * (format and species).\n\t */\n\tfilters: SearchFilter[] | null = null;\n\n\tconstructor(searchType: SearchType | '' = '', formatid = '' as ID, species = '' as ID) {\n\t\tthis.setType(searchType, formatid, species);\n\t}\n\n\tgetTypedSearch(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\n\t\tif (!searchType) return null;\n\t\tswitch (searchType) {\n\t\tcase 'pokemon': return new BattlePokemonSearch('pokemon', format, speciesOrSet);\n\t\tcase 'item': return new BattleItemSearch('item', format, speciesOrSet);\n\t\tcase 'move': return new BattleMoveSearch('move', format, speciesOrSet);\n\t\tcase 'ability': return new BattleAbilitySearch('ability', format, speciesOrSet);\n\t\tcase 'type': return new BattleTypeSearch('type', format, speciesOrSet);\n\t\tcase 'category': return new BattleCategorySearch('category', format, speciesOrSet);\n\t\t}\n\t\treturn null;\n\t}\n\n\tfind(query: string) {\n\t\tquery = toID(query);\n\t\tif (this.query === query && this.results) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.query = query;\n\t\tif (!query) {\n\t\t\tthis.results = this.typedSearch?.getResults(this.filters, this.sortCol, this.reverseSort) || [];\n\t\t} else {\n\t\t\tthis.results = this.textSearch(query);\n\t\t}\n\t\treturn true;\n\t}\n\n\tsetType(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\n\t\t// invalidate caches\n\t\tthis.results = null;\n\n\t\tif (searchType !== this.typedSearch?.searchType) {\n\t\t\tthis.filters = null;\n\t\t\tthis.sortCol = null;\n\t\t}\n\t\tthis.typedSearch = this.getTypedSearch(searchType, format, speciesOrSet);\n\t\tif (this.typedSearch) this.dex = this.typedSearch.dex;\n\t}\n\n\taddFilter(entry: SearchFilter): boolean {\n\t\tif (!this.typedSearch) return false;\n\t\tlet [type] = entry;\n\t\tif (this.typedSearch.searchType === 'pokemon') {\n\t\t\tif (type === this.sortCol) this.sortCol = null;\n\t\t\tif (!['type', 'move', 'ability', 'egggroup', 'tier'].includes(type)) return false;\n\t\t\tif (type === 'move') entry[1] = toID(entry[1]);\n\t\t\tif (!this.filters) this.filters = [];\n\t\t\tthis.results = null;\n\t\t\tfor (const filter of this.filters) {\n\t\t\t\tif (filter[0] === type && filter[1] === entry[1]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.filters.push(entry);\n\t\t\treturn true;\n\t\t} else if (this.typedSearch.searchType === 'move') {\n\t\t\tif (type === this.sortCol) this.sortCol = null;\n\t\t\tif (!['type', 'category', 'pokemon'].includes(type)) return false;\n\t\t\tif (type === 'pokemon') entry[1] = toID(entry[1]);\n\t\t\tif (!this.filters) this.filters = [];\n\t\t\tthis.filters.push(entry);\n\t\t\tthis.results = null;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tremoveFilter(entry?: SearchFilter): boolean {\n\t\tif (!this.filters) return false;\n\t\tif (entry) {\n\t\t\tconst filterid = entry.join(':');\n\t\t\tlet deleted: string[] | null = null;\n\t\t\t// delete specific filter\n\t\t\tfor (let i = 0; i < this.filters.length; i++) {\n\t\t\t\tif (filterid === this.filters[i].join(':')) {\n\t\t\t\t\tdeleted = this.filters[i];\n\t\t\t\t\tthis.filters.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!deleted) return false;\n\t\t} else {\n\t\t\tthis.filters.pop();\n\t\t}\n\t\tif (!this.filters.length) this.filters = null;\n\t\tthis.results = null;\n\t\treturn true;\n\t}\n\n\ttoggleSort(sortCol: string) {\n\t\tif (this.sortCol === sortCol) {\n\t\t\tif (!this.reverseSort) {\n\t\t\t\tthis.reverseSort = true;\n\t\t\t} else {\n\t\t\t\tthis.sortCol = null;\n\t\t\t\tthis.reverseSort = false;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.sortCol = sortCol;\n\t\t\tthis.reverseSort = false;\n\t\t}\n\t\tthis.results = null;\n\t}\n\n\tfilterLabel(filterType: string) {\n\t\tif (this.typedSearch && this.typedSearch.searchType !== filterType) {\n\t\t\treturn 'Filter';\n\t\t}\n\t\treturn null;\n\t}\n\tillegalLabel(id: ID) {\n\t\treturn this.typedSearch?.illegalReasons?.[id] || null;\n\t}\n\n\tgetTier(species: Species) {\n\t\treturn this.typedSearch?.getTier(species) || '';\n\t}\n\n\ttextSearch(query: string): SearchRow[] {\n\t\t// Nihilslave: change searchindex for big mods\n\t\tlet searchIndex = BattleSearchIndex;\n\t\tlet searchIndexOffset = BattleSearchIndexOffset;\n\t\tlet closest = DexSearch.getClosest;\n\t\tif (this.dex.modid.includes('digimon' as ID)) {\n\t\t\tsearchIndex = DigimonSearchIndex;\n\t\t\tsearchIndexOffset = DigimonSearchIndexOffset;\n\t\t\tclosest = function (query: string) {\n\t\t\t\t// binary search through the index!\n\t\t\t\tlet left = 0;\n\t\t\t\tlet right = searchIndex.length - 1;\n\t\t\t\twhile (right > left) {\n\t\t\t\t\tlet mid = Math.floor((right - left) / 2 + left);\n\t\t\t\t\tif (searchIndex[mid][0] === query && (mid === 0 || searchIndex[mid - 1][0] !== query)) {\n\t\t\t\t\t\t// that's us\n\t\t\t\t\t\treturn mid;\n\t\t\t\t\t} else if (searchIndex[mid][0] < query) {\n\t\t\t\t\t\tleft = mid + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tright = mid - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (left >= searchIndex.length - 1) left = searchIndex.length - 1;\n\t\t\t\telse if (searchIndex[left + 1][0] && searchIndex[left][0] < query) left++;\n\t\t\t\tif (left && searchIndex[left - 1][0] === query) left--;\n\t\t\t\treturn left;\n\t\t\t}\n\t\t}\n\n\t\tquery = toID(query);\n\n\t\tthis.exactMatch = false;\n\t\tlet searchType: SearchType | '' = this.typedSearch?.searchType || '';\n\n\t\t// If searchType exists, we're searching mainly for results of that type.\n\t\t// We'll still search for results of other types, but those results\n\t\t// will only be used to filter results for that type.\n\t\tlet searchTypeIndex = (searchType ? DexSearch.typeTable[searchType] : -1);\n\n\t\t/** searching for \"Psychic type\" will make the type come up over the move */\n\t\tlet qFilterType: 'type' | '' = '';\n\t\tif (query.slice(-4) === 'type') {\n\t\t\tif (query.slice(0, -4) in window.BattleTypeChart) {\n\t\t\t\tquery = query.slice(0, -4);\n\t\t\t\tqFilterType = 'type';\n\t\t\t}\n\t\t}\n\n\t\t// i represents the location of the search index we're looking at\n\t\tlet i = closest(query);\n\t\tthis.exactMatch = (searchIndex[i][0] === query);\n\n\t\t// Even with output buffer buckets, we make multiple passes through\n\t\t// the search index. searchPasses is a queue of which pass we're on:\n\t\t// [passType, i, query]\n\n\t\t// By doing an alias pass after the normal pass, we ensure that\n\t\t// mid-word matches only display after start matches.\n\t\tlet passType: SearchPassType | '' = '';\n\t\t/**\n\t\t * pass types:\n\t\t * * '': time to pop the next pass off the searchPasses queue\n\t\t * * 'normal': start at i and stop when results no longer start with query\n\t\t * * 'alias': like normal, but output aliases instead of non-alias results\n\t\t * * 'fuzzy': start at i and stop when you have two results\n\t\t * * 'exact': like normal, but stop at i\n\t\t */\n\t\ttype SearchPassType = 'normal' | 'alias' | 'fuzzy' | 'exact';\n\t\t/**\n\t\t * [passType, i, query]\n\t\t *\n\t\t * i = index of BattleSearchIndex to start from\n\t\t *\n\t\t * By doing an alias pass after the normal pass, we ensure that\n\t\t * mid-word matches only display after start matches.\n\t\t */\n\t\ttype SearchPass = [SearchPassType, number, string];\n\t\tlet searchPasses: SearchPass[] = [['normal', i, query]];\n\n\t\t// For performance reasons, only do an alias pass if query is at\n\t\t// least 2 chars long\n\t\tif (query.length > 1) searchPasses.push(['alias', i, query]);\n\n\t\t// If the query matches an official alias in BattleAliases: These are\n\t\t// different from the aliases in the search index and are given\n\t\t// higher priority. We'll do a normal pass through the index with\n\t\t// the alias text before any other passes.\n\t\tlet queryAlias;\n\t\tif (query in BattleAliases) {\n\t\t\tif (['sub', 'tr'].includes(query) || toID(BattleAliases[query]).slice(0, query.length) !== query) {\n\t\t\t\tqueryAlias = toID(BattleAliases[query]);\n\t\t\t\tlet aliasPassType: SearchPassType = (queryAlias === 'hiddenpower' ? 'exact' : 'normal');\n\t\t\t\tsearchPasses.unshift([aliasPassType, closest(queryAlias), queryAlias]);\n\t\t\t}\n\t\t\tthis.exactMatch = true;\n\t\t}\n\n\t\t// If there are no matches starting with query: Do a fuzzy match pass\n\t\t// Fuzzy matches will still be shown after alias matches\n\t\tif (!this.exactMatch && searchIndex[i][0].substr(0, query.length) !== query) {\n\t\t\t// No results start with this. Do a fuzzy match pass.\n\t\t\tlet matchLength = query.length - 1;\n\t\t\tif (!i) i++;\n\t\t\twhile (matchLength &&\n\t\t\t\tsearchIndex[i][0].substr(0, matchLength) !== query.substr(0, matchLength) &&\n\t\t\t\tsearchIndex[i - 1][0].substr(0, matchLength) !== query.substr(0, matchLength)) {\n\t\t\t\tmatchLength--;\n\t\t\t}\n\t\t\tlet matchQuery = query.substr(0, matchLength);\n\t\t\twhile (i >= 1 && searchIndex[i - 1][0].substr(0, matchLength) === matchQuery) i--;\n\t\t\tsearchPasses.push(['fuzzy', i, '']);\n\t\t}\n\n\t\t// We split the output buffers into 8 buckets.\n\t\t// Bucket 0 is usually unused, and buckets 1-7 represent\n\t\t// pokemon, types, moves, etc (see typeTable).\n\n\t\t// When we're done, the buffers are concatenated together to form\n\t\t// our results, with each buffer getting its own header, unlike\n\t\t// multiple-pass results, which have no header.\n\n\t\t// Notes:\n\t\t// - if we have a searchType, that searchType's buffer will be on top\n\t\tlet bufs: SearchRow[][] = [[], [], [], [], [], [], [], [], [], []];\n\t\tlet topbufIndex = -1;\n\n\t\tlet count = 0;\n\t\tlet nearMatch = false;\n\n\t\t/** [type, id, typeIndex] */\n\t\tlet instafilter: [SearchType, ID, number] | null = null;\n\t\tlet instafilterSort = [0, 1, 2, 5, 4, 3, 6, 7, 8];\n\t\tlet illegal = this.typedSearch?.illegalReasons;\n\n\t\t// We aren't actually looping through the entirety of the searchIndex\n\t\tfor (i = 0; i < searchIndex.length; i++) {\n\t\t\tif (!passType) {\n\t\t\t\tlet searchPass = searchPasses.shift();\n\t\t\t\tif (!searchPass) break;\n\t\t\t\tpassType = searchPass[0];\n\t\t\t\ti = searchPass[1];\n\t\t\t\tquery = searchPass[2];\n\t\t\t}\n\n\t\t\tlet entry = searchIndex[i];\n\t\t\tlet id = entry[0];\n\t\t\tlet type = entry[1];\n\n\t\t\tif (!id) break;\n\n\t\t\tif (passType === 'fuzzy') {\n\t\t\t\t// fuzzy match pass; stop after 2 results\n\t\t\t\tif (count >= 2) {\n\t\t\t\t\tpassType = '';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnearMatch = true;\n\t\t\t} else if (passType === 'exact') {\n\t\t\t\t// exact pass; stop after 1 result\n\t\t\t\tif (count >= 1) {\n\t\t\t\t\tpassType = '';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (id.substr(0, query.length) !== query) {\n\t\t\t\t// regular pass, time to move onto our next match\n\t\t\t\tpassType = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (entry.length > 2) {\n\t\t\t\t// alias entry\n\t\t\t\tif (passType !== 'alias') continue;\n\t\t\t} else {\n\t\t\t\t// normal entry\n\t\t\t\tif (passType === 'alias') continue;\n\t\t\t}\n\n\t\t\tlet typeIndex = DexSearch.typeTable[type];\n\n\t\t\t// For performance, with a query length of 1, we only fill the first bucket\n\t\t\tif (query.length === 1 && typeIndex !== (searchType ? searchTypeIndex : 1)) continue;\n\n\t\t\t// For pokemon queries, accept types/tier/abilities/moves/eggroups as filters\n\t\t\tif (searchType === 'pokemon' && (typeIndex === 5 || typeIndex > 7)) continue;\n\t\t\tif (searchType === 'pokemon' && typeIndex === 3 && this.dex.gen < 9) continue;\n\t\t\t// For move queries, accept types/categories as filters\n\t\t\tif (searchType === 'move' && ((typeIndex !== 8 && typeIndex > 4) || typeIndex === 3)) continue;\n\t\t\t// For move queries in the teambuilder, don't accept pokemon as filters\n\t\t\tif (searchType === 'move' && illegal && typeIndex === 1) continue;\n\t\t\t// For ability/item queries, don't accept anything else as a filter\n\t\t\tif ((searchType === 'ability' || searchType === 'item') && typeIndex !== searchTypeIndex) continue;\n\t\t\t// Query was a type name followed 'type'; only show types\n\t\t\tif (qFilterType === 'type' && typeIndex !== 2) continue;\n\t\t\t// hardcode cases of duplicate non-consecutive aliases\n\t\t\tif ((id === 'megax' || id === 'megay') && 'mega'.startsWith(query)) continue;\n\n\t\t\tlet matchStart = 0;\n\t\t\tlet matchEnd = 0;\n\t\t\tif (passType === 'alias') {\n\t\t\t\t// alias entry\n\t\t\t\t// [aliasid, type, originalid, matchStart, originalindex]\n\t\t\t\tmatchStart = entry[3]!;\n\t\t\t\tlet originalIndex = entry[2]!;\n\t\t\t\tif (matchStart) {\n\t\t\t\t\tmatchEnd = matchStart + query.length;\n\t\t\t\t\tmatchStart += (searchIndexOffset[originalIndex][matchStart] || '0').charCodeAt(0) - 48;\n\t\t\t\t\tmatchEnd += (searchIndexOffset[originalIndex][matchEnd - 1] || '0').charCodeAt(0) - 48;\n\t\t\t\t}\n\t\t\t\tid = searchIndex[originalIndex][0];\n\t\t\t} else {\n\t\t\t\tmatchEnd = query.length;\n\t\t\t\tif (matchEnd) matchEnd += (searchIndexOffset[i][matchEnd - 1] || '0').charCodeAt(0) - 48;\n\t\t\t}\n\n\t\t\t// some aliases are substrings\n\t\t\tif (queryAlias === id && query !== id) continue;\n\n\t\t\tif (searchType && searchTypeIndex !== typeIndex) {\n\t\t\t\t// This is a filter, set it as an instafilter candidate\n\t\t\t\tif (!instafilter || instafilterSort[typeIndex] < instafilterSort[instafilter[2]]) {\n\t\t\t\t\tinstafilter = [type, id, typeIndex];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// show types above Arceus formes\n\t\t\tif (topbufIndex < 0 && searchTypeIndex < 2 && passType === 'alias' && !bufs[1].length && bufs[2].length) {\n\t\t\t\ttopbufIndex = 2;\n\t\t\t}\n\n\t\t\tif (illegal && typeIndex === searchTypeIndex) {\n\t\t\t\t// Always show illegal results under legal results.\n\t\t\t\t// This is done by putting legal results (and the type header)\n\t\t\t\t// in bucket 0, and illegal results in the searchType's bucket.\n\t\t\t\t// searchType buckets are always on top (but under bucket 0), so\n\t\t\t\t// illegal results will be seamlessly right under legal results.\n\t\t\t\tif (!bufs[typeIndex].length && !bufs[0].length) {\n\t\t\t\t\tbufs[0] = [['header', DexSearch.typeName[type]]];\n\t\t\t\t}\n\t\t\t\tif (!(id in illegal)) typeIndex = 0;\n\t\t\t} else {\n\t\t\t\tif (!bufs[typeIndex].length) {\n\t\t\t\t\tbufs[typeIndex] = [['header', DexSearch.typeName[type]]];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// don't match duplicate aliases\n\t\t\tlet curBufLength = (passType === 'alias' && bufs[typeIndex].length);\n\t\t\tif (curBufLength && bufs[typeIndex][curBufLength - 1][1] === id) continue;\n\n\t\t\tbufs[typeIndex].push([type, id, matchStart, matchEnd]);\n\n\t\t\tcount++;\n\t\t}\n\n\t\tlet topbuf: SearchRow[] = [];\n\t\tif (nearMatch) {\n\t\t\ttopbuf = [['html', `<em>No exact match found. The closest matches alphabetically are:</em>`]];\n\t\t}\n\t\tif (topbufIndex >= 0) {\n\t\t\ttopbuf = topbuf.concat(bufs[topbufIndex]);\n\t\t\tbufs[topbufIndex] = [];\n\t\t}\n\t\tif (searchTypeIndex >= 0) {\n\t\t\ttopbuf = topbuf.concat(bufs[0]);\n\t\t\ttopbuf = topbuf.concat(bufs[searchTypeIndex]);\n\t\t\tbufs[searchTypeIndex] = [];\n\t\t\tbufs[0] = [];\n\t\t}\n\n\t\tif (instafilter && count < 20) {\n\t\t\t// Result count is less than 20, so we can instafilter\n\t\t\tbufs.push(this.instafilter(searchType, instafilter[0], instafilter[1]));\n\t\t}\n\n\t\tthis.results = Array.prototype.concat.apply(topbuf, bufs);\n\t\treturn this.results;\n\t}\n\tprivate instafilter(searchType: SearchType | '', fType: SearchType, fId: ID): SearchRow[] {\n\t\tlet buf: SearchRow[] = [];\n\t\tlet illegalBuf: SearchRow[] = [];\n\t\tlet illegal = this.typedSearch?.illegalReasons;\n\t\tif (searchType === 'pokemon') {\n\t\t\tswitch (fType) {\n\t\t\tcase 'type':\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1) as TypeName;\n\t\t\t\tbuf.push(['header', `${type}-type Pok&eacute;mon`]);\n\t\t\t\tfor (let id in BattlePokedex) {\n\t\t\t\t\tif (!BattlePokedex[id].types) continue;\n\t\t\t\t\tif (this.dex.species.get(id).types.includes(type)) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'ability':\n\t\t\t\t// Nihilslave: idk why it uses Dex here instead of this.dex, but it's risky to change\n\t\t\t\tlet ability = Dex.abilities.get(fId).name;\n\t\t\t\tbuf.push(['header', `${ability} Pok&eacute;mon`]);\n\t\t\t\tfor (let id in BattlePokedex) {\n\t\t\t\t\tif (!BattlePokedex[id].abilities) continue;\n\t\t\t\t\tif (Dex.hasAbility(this.dex.species.get(id), ability)) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (searchType === 'move') {\n\t\t\tswitch (fType) {\n\t\t\tcase 'type':\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1);\n\t\t\t\tbuf.push(['header', `${type}-type moves`]);\n\t\t\t\tfor (let id in BattleMovedex) {\n\t\t\t\t\tif (BattleMovedex[id].type === type) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'category':\n\t\t\t\tlet category = fId.charAt(0).toUpperCase() + fId.slice(1);\n\t\t\t\tbuf.push(['header', `${category} moves`]);\n\t\t\t\tfor (let id in BattleMovedex) {\n\t\t\t\t\tif (BattleMovedex[id].category === category) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn [...buf, ...illegalBuf];\n\t}\n\n\tstatic getClosest(query: string) {\n\t\t// binary search through the index!\n\t\tlet left = 0;\n\t\tlet right = BattleSearchIndex.length - 1;\n\t\twhile (right > left) {\n\t\t\tlet mid = Math.floor((right - left) / 2 + left);\n\t\t\tif (BattleSearchIndex[mid][0] === query && (mid === 0 || BattleSearchIndex[mid - 1][0] !== query)) {\n\t\t\t\t// that's us\n\t\t\t\treturn mid;\n\t\t\t} else if (BattleSearchIndex[mid][0] < query) {\n\t\t\t\tleft = mid + 1;\n\t\t\t} else {\n\t\t\t\tright = mid - 1;\n\t\t\t}\n\t\t}\n\t\tif (left >= BattleSearchIndex.length - 1) left = BattleSearchIndex.length - 1;\n\t\telse if (BattleSearchIndex[left + 1][0] && BattleSearchIndex[left][0] < query) left++;\n\t\tif (left && BattleSearchIndex[left - 1][0] === query) left--;\n\t\treturn left;\n\t}\n}\n\nabstract class BattleTypedSearch<T extends SearchType> {\n\tsearchType: T;\n\t/**\n\t * Dex for the mod/generation to search.\n\t */\n\tdex: ModdedDex = Dex;\n\t/**\n\t * Format is the first of two base filters. It constrains results to things\n\t * legal in the format, and affects the default sort.\n\t *\n\t * This string specifically normalizes out generation number and the words\n\t * \"Doubles\" and \"Let's Go\" from the name.\n\t */\n\tformats = [''] as ID[];\n\t/**\n\t * `species` is the second of two base filters. It constrains results to\n\t * things that species can use, and affects the default sort.\n\t */\n\tspecies = '' as ID;\n\t/**\n\t * `set` is a pseudo-base filter; it has minor effects on move sorting.\n\t * (Abilities/items can affect what moves are sorted as usable.)\n\t */\n\tset: PokemonSet | null = null;\n\n\t/**\n\t * Cached copy of what the results list would be with only base filters\n\t * (i.e. with an empty `query` and `filters`)\n\t */\n\tbaseResults: SearchRow[] | null = null;\n\t/**\n\t * Cached copy of all results not in `baseResults` - mostly in case a user\n\t * is wondering why a specific result isn't showing up.\n\t */\n\tbaseIllegalResults: SearchRow[] | null = null;\n\tillegalReasons: {[id: string]: string} | null = null;\n\tresults: SearchRow[] | null = null;\n\n\tprotected readonly sortRow: SearchRow | null = null;\n\n\tconstructor(searchType: T, format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\n\t\tthis.searchType = searchType;\n\n\t\tthis.baseResults = null;\n\t\tthis.baseIllegalResults = null;\n\n\t\tthis.dex = Dex.mod(format);\n\n\t\t/**\n\t\t * formatType and format are two piles of shit, so I removed them\n\t\t * just use this.formats = this.dex.modid.slice() instead\n\t\t * generally i think we should let dex handle most things\n\t\t * since it now can be in any mods\n\t\t */\n\t\tthis.formats = this.dex.modid.slice();\n\n\t\tthis.species = '' as ID;\n\t\tthis.set = null;\n\t\tif (typeof speciesOrSet === 'string') {\n\t\t\tif (speciesOrSet) this.species = speciesOrSet;\n\t\t} else {\n\t\t\tthis.set = speciesOrSet as PokemonSet;\n\t\t\tthis.species = toID(this.set.species);\n\t\t}\n\t\tif (!searchType || !this.set) return;\n\t}\n\tgetResults(filters?: SearchFilter[] | null, sortCol?: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tif (sortCol === 'type') {\n\t\t\treturn [this.sortRow!, ...BattleTypeSearch.prototype.getDefaultResults.call(this)];\n\t\t} else if (sortCol === 'category') {\n\t\t\treturn [this.sortRow!, ...BattleCategorySearch.prototype.getDefaultResults.call(this)];\n\t\t} else if (sortCol === 'ability') {\n\t\t\treturn [this.sortRow!, ...BattleAbilitySearch.prototype.getDefaultResults.call(this)];\n\t\t}\n\n\t\tif (!this.baseResults) {\n\t\t\tthis.baseResults = this.getBaseResults();\n\t\t}\n\n\t\tif (!this.baseIllegalResults) {\n\t\t\tconst legalityFilter: {[id: string]: 1} = {};\n\t\t\tfor (const [resultType, value] of this.baseResults) {\n\t\t\t\tif (resultType === this.searchType) legalityFilter[value] = 1;\n\t\t\t}\n\t\t\tthis.baseIllegalResults = [];\n\t\t\tthis.illegalReasons = {};\n\n\t\t\tfor (const id in this.getTable()) {\n\t\t\t\tif (!(id in legalityFilter)) {\n\t\t\t\t\tthis.baseIllegalResults.push([this.searchType, id as ID]);\n\t\t\t\t\tthis.illegalReasons[id] = 'Illegal';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet results: SearchRow[];\n\t\tlet illegalResults: SearchRow[] | null;\n\n\t\tif (filters) {\n\t\t\tresults = [];\n\t\t\tillegalResults = [];\n\t\t\tfor (const result of this.baseResults) {\n\t\t\t\tif (this.filter(result, filters)) {\n\t\t\t\t\tif (results.length && result[0] === 'header' && results[results.length - 1][0] === 'header') {\n\t\t\t\t\t\tresults[results.length - 1] = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.push(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (results.length && results[results.length - 1][0] === 'header') {\n\t\t\t\tresults.pop();\n\t\t\t}\n\t\t\tfor (const result of this.baseIllegalResults) {\n\t\t\t\tif (this.filter(result, filters)) {\n\t\t\t\t\tillegalResults.push(result);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tresults = [...this.baseResults];\n\t\t\tillegalResults = null;\n\t\t}\n\n\t\tif (sortCol) {\n\t\t\tresults = results.filter(([rowType]) => rowType === this.searchType);\n\t\t\tresults = this.sort(results, sortCol, reverseSort);\n\t\t\tif (illegalResults) {\n\t\t\t\tillegalResults = illegalResults.filter(([rowType]) => rowType === this.searchType);\n\t\t\t\tillegalResults = this.sort(illegalResults, sortCol, reverseSort);\n\t\t\t}\n\t\t}\n\n\t\tif (this.sortRow) {\n\t\t\tresults = [this.sortRow, ...results];\n\t\t}\n\t\tif (illegalResults && illegalResults.length) {\n\t\t\tresults = [...results, ['header', \"Illegal results\"], ...illegalResults];\n\t\t}\n\t\treturn results;\n\t}\n\tprotected firstLearnsetid(speciesid: ID) {\n\t\treturn this.dex.firstLearnsetid(speciesid);\n\t}\n\tprotected nextLearnsetid(learnsetid: ID, speciesid: ID) {\n\t\treturn this.dex.nextLearnsetid(learnsetid, speciesid);\n\t}\n\tprotected canLearn(speciesid: ID, moveid: ID) {\n\t\treturn this.dex.canLearn(speciesid, moveid);\n\t}\n\tgetTier(pokemon: Species) {\n\t\treturn this.dex.species.get(pokemon.name).tier;\n\t}\n\tabstract getTable(): {[id: string]: any};\n\tabstract getDefaultResults(): SearchRow[];\n\tabstract getBaseResults(): SearchRow[];\n\tabstract filter(input: SearchRow, filters: string[][]): boolean;\n\tabstract sort(input: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[];\n}\n\nclass BattlePokemonSearch extends BattleTypedSearch<'pokemon'> {\n\tsortRow: SearchRow = ['sortpokemon', ''];\n\tgetTable() {\n\t\treturn BattlePokedex;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tlet results: SearchRow[] = [];\n\t\tfor (let id in BattlePokedex) {\n\t\t\tswitch (id) {\n\t\t\tcase 'bulbasaur':\n\t\t\t\tresults.push(['header', \"Generation 1\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'chikorita':\n\t\t\t\tresults.push(['header', \"Generation 2\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'treecko':\n\t\t\t\tresults.push(['header', \"Generation 3\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'turtwig':\n\t\t\t\tresults.push(['header', \"Generation 4\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'victini':\n\t\t\t\tresults.push(['header', \"Generation 5\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'chespin':\n\t\t\t\tresults.push(['header', \"Generation 6\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'rowlet':\n\t\t\t\tresults.push(['header', \"Generation 7\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'grookey':\n\t\t\t\tresults.push(['header', \"Generation 8\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'sprigatito':\n\t\t\t\tresults.push(['header', \"Generation 9\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'missingno':\n\t\t\t\tresults.push(['header', \"Glitch\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'syclar':\n\t\t\t\tresults.push(['header', \"CAP\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'pikachucosplay':\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresults.push(['pokemon', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n\tgetBaseResults(): SearchRow[] {\n\t\treturn this.dex.getTierSet();\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'pokemon') return true;\n\t\tconst species = this.dex.species.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'type':\n\t\t\t\t// Nihilslave: change this for digimon, it works better anyway tho\n\t\t\t\tif (!species.types.includes(value as TypeName)) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'egggroup':\n\t\t\t\tif (species.eggGroups[0] !== value && species.eggGroups[1] !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'tier':\n\t\t\t\tif (this.getTier(species) !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'ability':\n\t\t\t\tif (!Dex.hasAbility(species, value)) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\t\tif (!this.canLearn(species.id, value as ID)) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean) {\n\t\tconst sortOrder = reverseSort ? -1 : 1;\n\t\tif (['hp', 'atk', 'def', 'spa', 'spd', 'spe'].includes(sortCol)) {\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst stat1 = this.dex.species.get(id1).baseStats[sortCol as StatName];\n\t\t\t\tconst stat2 = this.dex.species.get(id2).baseStats[sortCol as StatName];\n\t\t\t\treturn (stat2 - stat1) * sortOrder;\n\t\t\t});\n\t\t} else if (sortCol === 'bst') {\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst base1 = this.dex.species.get(id1).baseStats;\n\t\t\t\tconst base2 = this.dex.species.get(id2).baseStats;\n\t\t\t\tconst bst1 = base1.hp + base1.atk + base1.def + base1.spa + base1.spd + base1.spe;\n\t\t\t\tconst bst2 = base2.hp + base2.atk + base2.def + base2.spa + base2.spd + base2.spe;\n\t\t\t\treturn (bst2 - bst1) * sortOrder;\n\t\t\t});\n\t\t} else if (sortCol === 'name') {\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst name1 = id1;\n\t\t\t\tconst name2 = id2;\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\n\t\t\t});\n\t\t}\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleAbilitySearch extends BattleTypedSearch<'ability'> {\n\tgetTable() {\n\t\treturn BattleAbilities;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tconst results: SearchRow[] = [];\n\t\tfor (let id in BattleAbilities) {\n\t\t\tconst skipped = ['noability', 'mountaineer', 'rebound', 'persistent', 'allseeingeye'];\n\t\t\tif (skipped.includes(id)) continue;\n\t\t\tresults.push(['ability', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n\tgetBaseResults() {\n\t\tif (!this.set) return this.getDefaultResults();\n\t\tif (this.formats.includes('gen9morebalancedhackmons' as ID)) {\n\t\t\treturn ([['header', \"MBHv4\"], ['ability', 'allseeingeye' as ID], ['header', \"Abilities\"]] as SearchRow[])\n\t\t\t\t.concat(this.getDefaultResults());\n\t\t}\n\t\tif (\n\t\t\tthis.formats.includes('almostanyability' as ID) ||\n\t\t\tthis.formats.includes('createmons' as ID) ||\n\t\t\tthis.formats.includes('hackmons' as ID) ||\n\t\t\tthis.formats.includes('metronome' as ID)\n\t\t) return ([['header', \"Abilities\"]] as SearchRow[]).concat(this.getDefaultResults());\n\t\tconst dex = this.dex;\n\t\tlet species = dex.species.getFromPokemon(this.set);\n\t\tlet speciesAbilities = {...species.abilities};\n\t\tlet abilitySet: SearchRow[] = [['header', \"Abilities\"]];\n\n\t\tif (species.isMega) {\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${speciesAbilities['0']}</strong> after Mega Evolving.`]);\n\t\t\tspecies = dex.species.get(species.baseSpecies);\n\t\t}\n\t\tif (species.forme === 'X') {\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${speciesAbilities['0']}</strong> after X-Evolving.`]);\n\t\t\tspecies = dex.species.get(species.baseSpecies);\n\t\t}\n\t\tabilitySet.push(['ability', toID(speciesAbilities['0'])]);\n\t\tif (speciesAbilities['1']) {\n\t\t\tabilitySet.push(['ability', toID(speciesAbilities['1'])]);\n\t\t}\n\t\tif (speciesAbilities['H']) {\n\t\t\tabilitySet.push(['header', \"Hidden Ability\"]);\n\t\t\tabilitySet.push(['ability', toID(speciesAbilities['H'])]);\n\t\t}\n\t\tif (speciesAbilities['S']) {\n\t\t\tabilitySet.push(['header', \"Special Event Ability\"]);\n\t\t\tabilitySet.push(['ability', toID(speciesAbilities['S'])]);\n\t\t}\n\t\treturn abilitySet;\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'ability') return true;\n\t\tconst ability = this.dex.abilities.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'pokemon':\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleItemSearch extends BattleTypedSearch<'item'> {\n\tgetTable() {\n\t\treturn BattleItems;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\treturn this.dex.getItemSet();\n\t}\n\tgetBaseResults(): SearchRow[] {\n\t\tif (!this.species) return this.getDefaultResults();\n\t\tconst speciesName = this.dex.species.get(this.species).name;\n\t\tconst results = this.getDefaultResults();\n\t\tconst speciesSpecific: SearchRow[] = [];\n\t\tfor (const row of results) {\n\t\t\tif (row[0] !== 'item') continue;\n\t\t\tif (this.dex.items.get(row[1]).itemUser?.includes(speciesName)) {\n\t\t\t\tspeciesSpecific.push(row);\n\t\t\t}\n\t\t}\n\t\tif (speciesSpecific.length) {\n\t\t\treturn [\n\t\t\t\t['header', \"Specific to \" + speciesName],\n\t\t\t\t...speciesSpecific,\n\t\t\t\t...results,\n\t\t\t];\n\t\t}\n\t\treturn results;\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'ability') return true;\n\t\tconst ability = this.dex.abilities.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'pokemon':\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleMoveSearch extends BattleTypedSearch<'move'> {\n\tsortRow: SearchRow = ['sortmove', ''];\n\tgetTable() {\n\t\treturn BattleMovedex;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tlet results: SearchRow[] = [];\n\t\tresults.push(['header', \"Moves\"]);\n\t\tfor (let id in BattleMovedex) {\n\t\t\tconst skipped = ['paleowave', 'shadowstrike'];\n\t\t\tif (skipped.includes(id)) continue;\n\t\t\tresults.push(['move', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n\tprivate moveIsNotUseless(id: ID, species: Species, moves: string[], set: PokemonSet | null) {\n\t\tconst dex = this.dex;\n\n\t\tlet abilityid: ID = set ? toID(set.ability) : '' as ID;\n\t\tconst itemid: ID = set ? toID(set.item) : '' as ID;\n\n\t\tif (dex.gen === 1) {\n\t\t\t// Usually not useless for Gen 1\n\t\t\tif ([\n\t\t\t\t'acidarmor', 'amnesia', 'barrier', 'bind', 'blizzard', 'clamp', 'confuseray', 'counter', 'firespin', 'growth', 'headbutt', 'hyperbeam', 'mirrormove', 'pinmissile', 'razorleaf', 'sing', 'slash', 'sludge', 'twineedle', 'wrap',\n\t\t\t].includes(id)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Usually useless for Gen 1\n\t\t\tif ([\n\t\t\t\t'disable', 'haze', 'leechseed', 'quickattack', 'roar', 'thunder', 'toxic', 'triattack', 'waterfall', 'whirlwind',\n\t\t\t].includes(id)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Not useless only when certain moves aren't present\n\t\t\tswitch (id) {\n\t\t\tcase 'bubblebeam': return (!moves.includes('surf') && !moves.includes('blizzard'));\n\t\t\tcase 'doubleedge': return !moves.includes('bodyslam');\n\t\t\tcase 'doublekick': return !moves.includes('submission');\n\t\t\tcase 'firepunch': return !moves.includes('fireblast');\n\t\t\tcase 'megadrain': return !moves.includes('razorleaf') && !moves.includes('surf');\n\t\t\tcase 'megakick': return !moves.includes('hyperbeam');\n\t\t\tcase 'reflect': return !moves.includes('barrier') && !moves.includes('acidarmor');\n\t\t\tcase 'stomp': return !moves.includes('headbutt');\n\t\t\tcase 'submission': return !moves.includes('highjumpkick');\n\t\t\tcase 'thunderpunch': return !moves.includes('thunderbolt');\n\t\t\tcase 'triattack': return !moves.includes('bodyslam');\n\t\t\t}\n\t\t\t// Useful and Useless moves for Stadium OU, which changes many game mechanics.\n\t\t\tif (this.dex.modid.includes('stadium' as ID)) {\n\t\t\t\tif (['doubleedge', 'focusenergy', 'haze'].includes(id)) return true;\n\t\t\t\tif (['hyperbeam', 'sing', 'hypnosis'].includes(id)) return false;\n\t\t\t\tswitch (id) {\n\t\t\t\tcase 'fly': return !moves.includes('drillpeck');\n\t\t\t\tcase 'dig': return !moves.includes('earthquake');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.dex.modid.includes('gen7letsgo' as ID)) {\n\t\t\tif (['megadrain', 'teleport'].includes(id)) return true;\n\t\t}\n\n\t\tif (this.dex.modid.includes('metronome' as ID)) {\n\t\t\tif (id === 'metronome') return true;\n\t\t}\n\n\t\tif (itemid === 'pidgeotite') abilityid = 'noguard' as ID;\n\t\tif (itemid === 'blastoisinite') abilityid = 'megalauncher' as ID;\n\t\tif (itemid === 'aerodactylite') abilityid = 'toughclaws' as ID;\n\t\tif (itemid === 'glalitite') abilityid = 'refrigerate' as ID;\n\n\t\tswitch (id) {\n\t\tcase 'fakeout': case 'flamecharge': case 'nuzzle': case 'poweruppunch':\n\t\t\treturn abilityid !== 'sheerforce';\n\t\tcase 'solarbeam': case 'solarblade':\n\t\t\treturn ['desolateland', 'drought', 'chlorophyll', 'orichalcumpulse'].includes(abilityid) || itemid === 'powerherb';\n\t\tcase 'dynamicpunch': case 'grasswhistle': case 'inferno': case 'sing': case 'zapcannon':\n\t\t\treturn abilityid === 'noguard';\n\t\tcase 'heatcrash': case 'heavyslam':\n\t\t\treturn species.weightkg >= (species.evos ? 75 : 130);\n\n\t\tcase 'aerialace':\n\t\t\treturn ['technician', 'toughclaws'].includes(abilityid) && !moves.includes('bravebird');\n\t\tcase 'ancientpower':\n\t\t\treturn ['serenegrace', 'technician'].includes(abilityid) || !moves.includes('powergem');\n\t\tcase 'aquajet':\n\t\t\treturn !moves.includes('jetpunch');\n\t\tcase 'aurawheel':\n\t\t\treturn species.baseSpecies === 'Morpeko';\n\t\tcase 'axekick':\n\t\t\treturn !moves.includes('highjumpkick');\n\t\tcase 'bellydrum':\n\t\t\treturn moves.includes('aquajet') || moves.includes('jetpunch') || moves.includes('extremespeed') ||\n\t\t\t\t['iceface', 'unburden'].includes(abilityid);\n\t\tcase 'bulletseed':\n\t\t\treturn ['skilllink', 'technician'].includes(abilityid);\n\t\tcase 'chillingwater':\n\t\t\treturn !moves.includes('scald');\n\t\tcase 'counter':\n\t\t\treturn species.baseStats.hp >= 65;\n\t\tcase 'darkvoid':\n\t\t\treturn dex.gen < 7;\n\t\tcase 'dualwingbeat':\n\t\t\treturn abilityid === 'technician' || !moves.includes('drillpeck');\n\t\tcase 'feint':\n\t\t\treturn abilityid === 'refrigerate';\n\t\tcase 'grassyglide':\n\t\t\treturn abilityid === 'grassysurge';\n\t\tcase 'gyroball':\n\t\t\treturn species.baseStats.spe <= 60;\n\t\tcase 'headbutt':\n\t\t\treturn abilityid === 'serenegrace';\n\t\tcase 'hex':\n\t\t\treturn !moves.includes('infernalparade');\n\t\tcase 'hiddenpowerelectric':\n\t\t\treturn (dex.gen < 4 && !moves.includes('thunderpunch')) && !moves.includes('thunderbolt');\n\t\tcase 'hiddenpowerfighting':\n\t\t\treturn (dex.gen < 4 && !moves.includes('brickbreak')) && !moves.includes('aurasphere') && !moves.includes('focusblast');\n\t\tcase 'hiddenpowerfire':\n\t\t\treturn (dex.gen < 4 && !moves.includes('firepunch')) && !moves.includes('flamethrower') &&\n\t\t\t\t!moves.includes('mysticalfire') && !moves.includes('burningjealousy');\n\t\tcase 'hiddenpowergrass':\n\t\t\treturn !moves.includes('energyball') && !moves.includes('grassknot') && !moves.includes('gigadrain');\n\t\tcase 'hiddenpowerice':\n\t\t\treturn !moves.includes('icebeam') && (dex.gen < 4 && !moves.includes('icepunch')) ||\n\t\t\t\t(dex.gen > 5 && !moves.includes('aurorabeam') && !moves.includes('glaciate'));\n\t\tcase 'hiddenpowerflying':\n\t\t\treturn dex.gen < 4 && !moves.includes('drillpeck');\n\t\tcase 'hiddenpowerbug':\n\t\t\treturn dex.gen < 4 && !moves.includes('megahorn');\n\t\tcase 'hiddenpowerpsychic':\n\t\t\treturn species.baseSpecies === 'Unown';\n\t\tcase 'hyperspacefury':\n\t\t\treturn species.id === 'hoopaunbound';\n\t\tcase 'hypnosis':\n\t\t\treturn (dex.gen < 4 && !moves.includes('sleeppowder')) || (dex.gen > 6 && abilityid === 'baddreams');\n\t\tcase 'icepunch':\n\t\t\treturn !moves.includes('icespinner') || ['sheerforce', 'ironfist'].includes(abilityid) || itemid === 'punchingglove';\n\t\tcase 'iciclecrash':\n\t\t\treturn !moves.includes('mountaingale');\n\t\tcase 'icywind':\n\t\t\t// Keldeo needs Hidden Power for Electric/Ghost\n\t\t\treturn species.baseSpecies === 'Keldeo' || this.dex.modid.includes('doubles' as ID);\n\t\tcase 'infestation':\n\t\t\treturn moves.includes('stickyweb');\n\t\tcase 'irondefense':\n\t\t\treturn !moves.includes('acidarmor');\n\t\tcase 'irontail':\n\t\t\treturn dex.gen > 5 && !moves.includes('ironhead') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\n\t\tcase 'jumpkick':\n\t\t\treturn !moves.includes('highjumpkick') && !moves.includes('axekick');\n\t\tcase 'lastresort':\n\t\t\treturn set && set.moves.length < 3;\n\t\tcase 'leechlife':\n\t\t\treturn dex.gen > 6;\n\t\tcase 'mysticalfire':\n\t\t\treturn dex.gen > 6 && !moves.includes('flamethrower');\n\t\tcase 'naturepower':\n\t\t\treturn dex.gen === 5;\n\t\tcase 'nightslash':\n\t\t\treturn !moves.includes('crunch') && !(moves.includes('knockoff') && dex.gen >= 6);\n\t\tcase 'outrage':\n\t\t\treturn !moves.includes('glaiverush');\n\t\tcase 'petaldance':\n\t\t\treturn abilityid === 'owntempo';\n\t\tcase 'phantomforce':\n\t\t\treturn (!moves.includes('poltergeist') && !moves.includes('shadowclaw')) || this.dex.modid.includes('doubles' as ID);\n\t\tcase 'poisonfang':\n\t\t\treturn species.types.includes('Poison') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\n\t\tcase 'relicsong':\n\t\t\treturn species.id === 'meloetta';\n\t\tcase 'refresh':\n\t\t\treturn !moves.includes('aromatherapy') && !moves.includes('healbell');\n\t\tcase 'risingvoltage':\n\t\t\treturn abilityid === 'electricsurge' || abilityid === 'hadronengine';\n\t\tcase 'rocktomb':\n\t\t\treturn abilityid === 'technician';\n\t\tcase 'selfdestruct':\n\t\t\treturn dex.gen < 5 && !moves.includes('explosion');\n\t\tcase 'shadowpunch':\n\t\t\treturn abilityid === 'ironfist' && !moves.includes('ragefist');\n\t\tcase 'shelter':\n\t\t\treturn !moves.includes('acidarmor') && !moves.includes('irondefense');\n\t\tcase 'smackdown':\n\t\t\treturn species.types.includes('Ground');\n\t\tcase 'smartstrike':\n\t\t\treturn species.types.includes('Steel') && !moves.includes('ironhead');\n\t\tcase 'soak':\n\t\t\treturn abilityid === 'unaware';\n\t\tcase 'steelwing':\n\t\t\treturn !moves.includes('ironhead');\n\t\tcase 'stompingtantrum':\n\t\t\treturn (!moves.includes('earthquake') && !moves.includes('drillrun')) || this.dex.modid.includes('doubles' as ID);\n\t\tcase 'stunspore':\n\t\t\treturn !moves.includes('thunderwave');\n\t\tcase 'technoblast':\n\t\t\treturn dex.gen > 5 && itemid.endsWith('drive') || itemid === 'dousedrive';\n\t\tcase 'teleport':\n\t\t\treturn dex.gen > 7;\n\t\tcase 'terrainpulse': case 'waterpulse':\n\t\t\treturn ['megalauncher', 'technician'].includes(abilityid) && !moves.includes('originpulse');\n\t\tcase 'toxicspikes':\n\t\t\treturn abilityid !== 'toxicdebris';\n\t\tcase 'trickroom':\n\t\t\treturn species.baseStats.spe <= 100;\n\t\t}\n\n\t\tif (this.dex.modid.includes('doubles' as ID) && BattleMoveSearch.GOOD_DOUBLES_MOVES.includes(id)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst moveData = BattleMovedex[id];\n\t\tif (!moveData) return true;\n\t\tif (moveData.category === 'Status') {\n\t\t\treturn BattleMoveSearch.GOOD_STATUS_MOVES.includes(id);\n\t\t}\n\t\tif (moveData.basePower < 75) {\n\t\t\treturn BattleMoveSearch.GOOD_WEAK_MOVES.includes(id);\n\t\t}\n\t\tif (id === 'skydrop') return true;\n\t\t// strong moves\n\t\tif (moveData.flags?.charge) {\n\t\t\treturn itemid === 'powerherb';\n\t\t}\n\t\tif (moveData.flags?.recharge) {\n\t\t\treturn false;\n\t\t}\n\t\tif (moveData.flags?.slicing && abilityid === 'sharpness') {\n\t\t\treturn true;\n\t\t}\n\t\treturn !BattleMoveSearch.BAD_STRONG_MOVES.includes(id);\n\t}\n\tstatic readonly GOOD_STATUS_MOVES = [\n\t\t'acidarmor', 'agility', 'aromatherapy', 'auroraveil', 'autotomize', 'banefulbunker', 'batonpass', 'bellydrum', 'bulkup', 'calmmind', 'chillyreception', 'clangoroussoul', 'coil', 'cottonguard', 'courtchange', 'curse', 'defog', 'destinybond', 'detect', 'disable', 'dragondance', 'encore', 'extremeevoboost', 'filletaway', 'geomancy', 'glare', 'haze', 'healbell', 'healingwish', 'healorder', 'heartswap', 'honeclaws', 'kingsshield', 'leechseed', 'lightscreen', 'lovelykiss', 'lunardance', 'magiccoat', 'maxguard', 'memento', 'milkdrink', 'moonlight', 'morningsun', 'nastyplot', 'naturesmadness', 'noretreat', 'obstruct', 'painsplit', 'partingshot', 'perishsong', 'protect', 'quiverdance', 'recover', 'reflect', 'reflecttype', 'rest', 'revivalblessing', 'roar', 'rockpolish', 'roost', 'shedtail', 'shellsmash', 'shiftgear', 'shoreup', 'silktrap', 'slackoff', 'sleeppowder', 'sleeptalk', 'softboiled', 'spikes', 'spikyshield', 'spore', 'stealthrock', 'stickyweb', 'strengthsap', 'substitute', 'switcheroo', 'swordsdance', 'synthesis', 'tailglow', 'tailwind', 'taunt', 'thunderwave', 'tidyup', 'toxic', 'transform', 'trick', 'victorydance', 'whirlwind', 'willowisp', 'wish', 'yawn',\n\t] as ID[] as readonly ID[];\n\tstatic readonly GOOD_WEAK_MOVES = [\n\t\t'accelerock', 'acrobatics', 'aquacutter', 'avalanche', 'barbbarrage', 'bonemerang', 'bouncybubble', 'bulletpunch', 'buzzybuzz', 'ceaselessedge', 'circlethrow', 'clearsmog', 'doubleironbash', 'dragondarts', 'dragontail', 'drainingkiss', 'endeavor', 'facade', 'firefang', 'flipturn', 'flowertrick', 'freezedry', 'frustration', 'geargrind', 'grassknot', 'gyroball', 'icefang', 'iceshard', 'iciclespear', 'infernalparade', 'knockoff', 'lastrespects', 'lowkick', 'machpunch', 'mortalspin', 'mysticalpower', 'naturesmadness', 'nightshade', 'nuzzle', 'pikapapow', 'populationbomb', 'psychocut', 'psyshieldbash', 'pursuit', 'quickattack', 'ragefist', 'rapidspin', 'return', 'rockblast', 'ruination', 'saltcure', 'scorchingsands', 'seismictoss', 'shadowclaw', 'shadowsneak', 'sizzlyslide', 'stoneaxe', 'storedpower', 'stormthrow', 'suckerpunch', 'superfang', 'surgingstrikes', 'tailslap', 'trailblaze', 'tripleaxel', 'tripledive', 'twinbeam', 'uturn', 'veeveevolley', 'voltswitch', 'watershuriken', 'weatherball',\n\t] as ID[] as readonly ID[];\n\tstatic readonly BAD_STRONG_MOVES = [\n\t\t'belch', 'burnup', 'crushclaw', 'dragonrush', 'dreameater', 'eggbomb', 'firepledge', 'flyingpress', 'grasspledge', 'hyperbeam', 'hyperfang', 'hyperspacehole', 'jawlock', 'landswrath', 'megakick', 'megapunch', 'mistyexplosion', 'muddywater', 'nightdaze', 'pollenpuff', 'rockclimb', 'selfdestruct', 'shelltrap', 'skyuppercut', 'slam', 'strength', 'submission', 'synchronoise', 'takedown', 'thrash', 'uproar', 'waterpledge',\n\t] as ID[] as readonly ID[];\n\tstatic readonly GOOD_DOUBLES_MOVES = [\n\t\t'allyswitch', 'bulldoze', 'coaching', 'electroweb', 'faketears', 'fling', 'followme', 'healpulse', 'helpinghand', 'junglehealing', 'lifedew', 'lunarblessing', 'muddywater', 'pollenpuff', 'psychup', 'ragepowder', 'safeguard', 'skillswap', 'snipeshot', 'wideguard',\n\t] as ID[] as readonly ID[];\n\tgetBaseResults() {\n\t\tif (!this.set) return this.getDefaultResults();\n\t\tconst dex = this.dex;\n\t\tlet species = dex.species.get(this.species);\n\t\tconst moves = dex.getLearnsetMoves(this.set);\n\t\tmoves.sort();\n\n\t\tlet usableMoves: SearchRow[] = [];\n\t\tlet uselessMoves: SearchRow[] = [];\n\t\tfor (const id of moves) {\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, moves, this.set);\n\t\t\tif (isUsable) {\n\t\t\t\tif (!usableMoves.length) usableMoves.push(['header', \"Moves\"]);\n\t\t\t\tusableMoves.push(['move', id as ID]);\n\t\t\t} else {\n\t\t\t\tif (!uselessMoves.length) uselessMoves.push(['header', \"Usually useless moves\"]);\n\t\t\t\tuselessMoves.push(['move', id as ID]);\n\t\t\t}\n\t\t}\n\t\treturn [...usableMoves, ...uselessMoves];\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'move') return true;\n\t\tconst move = this.dex.moves.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'type':\n\t\t\t\tif (move.type !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'category':\n\t\t\t\tif (move.category !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'pokemon':\n\t\t\t\tif (!this.canLearn(value as ID, move.id)) return false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[] {\n\t\tconst sortOrder = reverseSort ? -1 : 1;\n\t\tswitch (sortCol) {\n\t\tcase 'power':\n\t\t\tlet powerTable: {[id: string]: number | undefined} = {\n\t\t\t\treturn: 102, frustration: 102, spitup: 300, trumpcard: 200, naturalgift: 80, grassknot: 120,\n\t\t\t\tlowkick: 120, gyroball: 150, electroball: 150, flail: 200, reversal: 200, present: 120,\n\t\t\t\twringout: 120, crushgrip: 120, heatcrash: 120, heavyslam: 120, fling: 130, magnitude: 150,\n\t\t\t\tbeatup: 24, punishment: 1020, psywave: 1250, nightshade: 1200, seismictoss: 1200,\n\t\t\t\tdragonrage: 1140, sonicboom: 1120, superfang: 1350, endeavor: 1399, sheercold: 1501,\n\t\t\t\tfissure: 1500, horndrill: 1500, guillotine: 1500,\n\t\t\t};\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tlet move1 = this.dex.moves.get(id1);\n\t\t\t\tlet move2 = this.dex.moves.get(id2);\n\t\t\t\tlet pow1 = move1.basePower || powerTable[id1] || (move1.category === 'Status' ? -1 : 1400);\n\t\t\t\tlet pow2 = move2.basePower || powerTable[id2] || (move2.category === 'Status' ? -1 : 1400);\n\t\t\t\treturn (pow2 - pow1) * sortOrder;\n\t\t\t});\n\t\tcase 'accuracy':\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tlet accuracy1 = this.dex.moves.get(id1).accuracy || 0;\n\t\t\t\tlet accuracy2 = this.dex.moves.get(id2).accuracy || 0;\n\t\t\t\tif (accuracy1 === true) accuracy1 = 101;\n\t\t\t\tif (accuracy2 === true) accuracy2 = 101;\n\t\t\t\treturn (accuracy2 - accuracy1) * sortOrder;\n\t\t\t});\n\t\tcase 'pp':\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tlet pp1 = this.dex.moves.get(id1).pp || 0;\n\t\t\t\tlet pp2 = this.dex.moves.get(id2).pp || 0;\n\t\t\t\treturn (pp2 - pp1) * sortOrder;\n\t\t\t});\n\t\tcase 'name':\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst name1 = id1;\n\t\t\t\tconst name2 = id2;\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\n\t\t\t});\n\t\t}\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleCategorySearch extends BattleTypedSearch<'category'> {\n\tgetTable() {\n\t\treturn {physical: 1, special: 1, status: 1};\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\treturn [\n\t\t\t['category', 'physical' as ID],\n\t\t\t['category', 'special' as ID],\n\t\t\t['category', 'status' as ID],\n\t\t];\n\t}\n\tgetBaseResults() {\n\t\treturn this.getDefaultResults();\n\t}\n\tfilter(row: SearchRow, filters: string[][]): boolean {\n\t\tthrow new Error(\"invalid filter\");\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleTypeSearch extends BattleTypedSearch<'type'> {\n\t\n\tgetTable() {\n\t\treturn window.BattleTypeChart;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\treturn this.dex.getTypeSet();\n\t}\n\tgetBaseResults() {\n\t\treturn this.getDefaultResults();\n\t}\n\tfilter(row: SearchRow, filters: string[][]): boolean {\n\t\tthrow new Error(\"invalid filter\");\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n"],"mappings":"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"}